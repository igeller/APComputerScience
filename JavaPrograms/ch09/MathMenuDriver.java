// FileName:  MathMenuDriver.java// Chapter 9package ch09;import java.util.Scanner;public class MathMenuDriver  // no try-catch statements{	public static void main(String args[]) 	{		Scanner reader = new Scanner(System.in);		String menu;			// This variable will hold the multiline menu		int menuOption;		// The user's menu selection			/*  Finish the main method.  It will give the user the option of 		 *  making one of 5 choices:				Display the Multiplication Table up to 10 x 10				Find the Prime Numbers between Two Integers				Find a Fibonacci number				Find the Greatest Common Divisor of Two Integers				Quit			You may wish to start by copying and pasting the input loop code from the main			method of the file ConvertWithMenu_9_2.java. The code for this file will be basically 			the same.  It will just need to be modified appropriately for this program.		 */		// Build the menu string		menu = "\n1) Display the Multiplication Table up to 10 x 10"				+ "\n2) Find the Prime Numbers between Two Integers"				+ "\n3) Find a Fibonacci number"				+ "\n4) Find the Greatest Common Divisor of Two Integers"				+ "\n5) Quit"				+ "\nEnter your option: ";		// Set up the menu loop		menuOption = 6;	// prime the loop to start with any number except 5		while (menuOption != 5)		{			//Display the menu and get the user's option			System.out.print(menu);			menuOption = reader.nextInt();			System.out.println ();			// Write an extended if statement that will process the user's menu			// operation and call the correct method or make the program quit.			if (menuOption == 1)			{				multiplicationTable();			}			else if (menuOption == 2)			{				primeNumberGenerator();			}			else if (menuOption == 3)			{				fibonacciGenerator();			}			else if (menuOption == 4)			{				GCDFinder();			}			else if (menuOption == 5)			{				System.out.println("Goodbye!");			}			else if (menuOption == 6)			{				System.out.println("Invalid Option");			}																													}		System.out.println ("Program has terminated.");	}	// ********************************************************************************	// Complete the method MultiplicationTable by copying and pasting your	// code from the NestedLoopMania.java file.	public static void multiplicationTable()	{			System.out.printf("%32s%n", "Multiplication Table");		System.out.printf("%32s%n", "--------------------");		System.out.printf("%40s%n", "(  Generated by nested for loops  )");		System.out.println();		System.out.printf("%4s", "  ");		for (int i = 1; i <=10; ++i)			System.out.printf("%4d", i);		System.out.println();		System.out.println("----|----------------------------------------");		for (int row = 1; row <= 10; ++row)		{  			// print first part of one row			System.out.printf("%2d %2s", row, "|");			// print the remainder of the row in loop			for (int column = 1; column <= 10; ++column)				System.out.printf("%4d", row * column);			System.out.println(); 		}  // end of each row 		System.out.println();		System.out.println();		}	// ********************************************************************************														// Complete the method PrimeNumberGenerator.  This method contains the code	// from the file PrimeNumbers.java in your ch06 package folder.  Here is what to do:	// Complete the input statements before the loop so the method will run correctly.	// It should print all of the prime numbers between the lower limit and the upper limit.		// NO CODE TO WRITE IN THIS METHOD.  YOU SAW THIS CODE IN THE CHAPTER 5 LECTURE.	// HOWEVER, pay close attention to how the two while loops are used as a form of	// 	public static void primeNumberGenerator ()	{			Scanner reader = new Scanner(System.in);		int innerLimit, lower, upper;				// Prompt and receive from the user the lower limit of the range of prime numbers.		System.out.print("Enter a positive integer for the lower limit:  ");		lower = reader.nextInt();		// This while loop forces the user to enter a number greater than 0 for lower.		// If the user doesn't the loop will run again prompting the user for a number.		while (lower <= 0)		{			System.out.print("Enter a positive integer for the lower limit:  ");			lower = reader.nextInt();		}		// Prompt and receive from the user the upper limit of the range of prime numbers.		System.out.print("The upper limit must be greater than the lower limit. Enter the upper limit:  ");		upper = reader.nextInt();		// Write the while loop that forces the user to enter a number greater than lower for		// upper. If the user doesn't the loop will run again prompting the user for a number.		while (lower >= upper)		{			System.out.print("The upper limit must be greater than the lower limit. Enter the upper limit:  ");			upper = reader.nextInt();		}										System.out.println();		// The loop control variable n takes on every value between lower and upper, inclusive,		// checking it to see if it is prime.  The outer loop controls what integer is being		// checked and the inner loop checks the integer to see if it is prime.  Notice that		// the inner loop only needs to check possible factors up to innerLimit.  Where		// innerLimit is found by taking the square root of n.  Mathematically you should be		// able to realize that if there is a factor over the square root of n it has a		// corresponding factor that is less than the square root of n.  For example, if we are		// checking 8 to see if it is prime.  The square root of 8 is approximately 2.828427 and		// when we cast to (int), then innerLimit is 2.  So we only need to check factors up to		// 2.  2 has a corresponding factor 4 which is greater than the square root of 8.  But		// we don't need to search for 4 to see if it divides evenly because we have already 		// proved that 8 is not prime because 2 divides evenly into 8.  So once the inner loop		// is done, then if possibleFactor is greater than innerLimit, then a factor has not		// been found and the integer has to be prime.		int possibleFactor;		for (int n = lower; n <= upper; n++)		{			innerLimit = (int) Math.sqrt(n);				for (possibleFactor = 2; possibleFactor <= innerLimit; possibleFactor++)			{				if (n % possibleFactor == 0)					break;			}			if (possibleFactor > innerLimit)				System.out.println(n + " is prime!");		}		}	// end of primeNumberGenerator method			// ********************************************************************************	// The Fibonacci sequence is a sequence of numbers that occurs naturally	// in nature:   1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, etc.	// Each number in the sequence (except for the first two) is the result	// of adding the two previous numbers in the sequence.		// Finish the method	 FibonacciGenerator.  Specifically, here is what should happen:	// 		1)  The user enters an integer from the keyboard and it is stored in n.	//		2)  If the number is not between 1 and 46 inclusive, then a loop should run	//			asking the user to re-enter a number between 1 and 46 inclusive.  The	//			loop will continue to run until they do so.	// 		3)  The while loop will then calculate the nth fibonacci number.	public static void fibonacciGenerator() 	{			Scanner reader = new Scanner(System.in);		int n;					// The number indicating the nth term								// of the Fibonacci sequence that the								// user wants to find.		int fibonacciNumber;		// The nth Fibonacci number in the sequence		int firstTerm;			// the first term to be used in calculating the fib number		int secondTerm;			// the second term to be added in calculating the fib number		int count;				// loop control variable		// WRITE YOUR CODE FOR INSTRUCTIONS 1 & 2 ABOVE RIGHT HERE!		System.out.print("Enter a number to find its fibonacci number: ");		n = reader.nextInt();				// We can NOT find the 47th number in the Fibonacci sequence with this program		// as that value exceeds the range of standard integer values (int) for Java		// 2,147,483,647.				// Write a loop that forces the user to enter an integer between 1 and 46 inclusive.		// If the value is outside of this range, then the loop will prompt the user to		// enter an integer again.		while (n > 46 || n < 1)		{			System.out.print("Enter a number to find its fibonacci number: ");			n = reader.nextInt();			}														// Now calculate the nth Fibonacci number				// fibonacciNumber will hold 1 initially, but will stay 1 if the user		// wants the first or second fibonacci number.		fibonacciNumber = 1;    				// first and second term values will always be initialized to 1		firstTerm = 1;		secondTerm = 1;		count = 3;		// Write the loop that will calculate the fibonacci value.		// Loop is skipped if user asks for the first or second value in		// the Fibonacci sequence.//HOMEWORK		//if n< count then do not do the loop -- so n > then count then do loop				// ALGORITHM:  Assume that the Fibonacci sequence only contains the first two//		values 1 and 1 and these values are contained in firstTerm and//		secondTerm.  Each time a loop runs, then advance firstTerm and//		secondTerm by first calculating the next term in the sequence//		and updating the value of fibonacciNumber.//		Next, update the values of firstTerm and secondTerm.  The order//		of doing this is critical.			while (count <= n)		{			fibonacciNumber = firstTerm + secondTerm;			firstTerm = secondTerm;			secondTerm = fibonacciNumber;			count++;		}				/*if (n >= count)		{			for (int pos = 3; pos <= n; pos++)			{				fibonacciNumber = firstTerm + secondTerm;				firstTerm = secondTerm;				secondTerm = fibonacciNumber;			}		}*/								//Print the nth Fibonacci number 		System.out.println ("The Fibonacci number at position " + n + " is " + fibonacciNumber);	} // end of fibonacciGenerator method			// ********************************************************************************	/* 	 *  Complete the method	GCDFinder. This method should do the following:		Provide data validation to make sure that both inputs for "smaller"		and "larger" are positive. They cannot be equal to zero.		If both or one of the inputs are not positive, then the program should		display the message: "One or both of your numbers is NOT positive!"		Obviously, if both smaller and larger are greater than 0, then the program		should calculate and output the greatest common divisor of the two integers.	 	It is easiest to use a while loop rather than a for loop.	 	Here is the algorithm for finding the Greatest Common Divisor.	 	It is based on two variables:  gcd and factor.	 	gcd starts with a value of 1. factor starts with a value of 2.	 	Step 1. Test smaller and larger by dividing them by factor to see if they	 			divide evenly.  	 	Step 2. If they both divide evenly, then update GCD by factor and then reduce	 			smaller and larger by dividing factor into them and storing the result	 			in smaller and larger.  Repeat the process by going back to Step 1 and	 			using the same value of factor.	 	Step 3. If they do NOT divide evenly, then increment factor by 1 and go back to Step 1.	 	Continue the process while factor <= smaller.	 	Appropriate Test Data:	 	smaller = 1		larger = 6	 	smaller = 4		larger = 12	 	smaller = 15		larger = 15	 	smaller = 24		larger = 60	 	smaller = 252	larger = 270	 	smaller = -5		larger = 10	 		 	PSEUDOCODE BELOW METHOD!	 */	public static void GCDFinder ()	{		Scanner reader = new Scanner(System.in);		int smaller;		int larger;		System.out.println("Both the smaller & larger number should be greater than zero.");		System.out.print("Enter a positive integer for the smaller number: ");		smaller = reader.nextInt();		// Write a while loop that forces the user to enter a number greater than 0 for smaller.		// If the user doesn't the loop will run again prompting the user for a number.		while (smaller <= 0)		{			System.out.println();			System.out.print("Enter a positive integer for the smaller number: ");			smaller = reader.nextInt();		}										System.out.print("Enter a positive integer for the larger number: ");		larger =  reader.nextInt();		// Write a while loop that forces the user to enter a number for larger that		// is greater than the number in smaller.		while (larger <= smaller)		{			System.out.println();			System.out.print("Enter a positive integer for the larger number: ");			larger =  reader.nextInt();		}													int GCD = 1;		int factor = 2;		// Write the loop that uses smaller, larger, and factor to calculate GCD		// based on the algorithm shown you on the board.		while (factor <= smaller)		{			if (smaller%factor == 0 && larger%factor == 0)			{				GCD *= factor;				smaller /= factor;				larger /= factor;			}			else				factor++;		}														// This code after the loop.  Do Not Erase.		System.out.println("The GCD is " + GCD);	} // end of GCDFinder method} // end MathMenuDriver class