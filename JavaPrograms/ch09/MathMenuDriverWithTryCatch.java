// FileName:  MathMenuDriverWithTryCatch.java// Chapter 9.package ch09;import java.io.IOException;import java.util.InputMismatchException;import java.util.Scanner;public class MathMenuDriverWithTryCatch{	public static void main(String args[])	{		Scanner reader = new Scanner(System.in);		String menu;				// The multiline menu		int menuOption;		// The user's menu selection			menu = "\n1) Display the Multiplication Table up to 10 x 10"				+ "\n2) Find the Prime Numbers between Two Integers"				+ "\n3) Find a Fibonacci number"				+ "\n4) Find the Greatest Common Divisor of Two Integers"				+ "\n5) Divide by Parmater (Hope its not zero)"				+ "\n6) Quit"				+ "\nEnter your option: ";		menuOption = 7;		while (menuOption != 6)		{				while(true)			{				try 				{					System.out.println (menu);					// If a String or double is detected by the next line,					// then go immediately to catch clause.					menuOption = reader.nextInt();					break;				} 				catch (InputMismatchException e) 				{					System.out.println ("To make a selection you must enter an integer!");					reader.nextLine();				}			}			//Determine which menu option has been selected			if (menuOption == 1)			{    				MultiplicationTable();   // no try-catch statement needed.			} 			else if (menuOption == 2) 			{  				// Write a try-catch statement and place the call to PrimeNumberGenerator				// in the try branch.  The catch clause will catch a thrown IOException				// where the message is returned from the method and stored in the 				// parameter e, so just print e ... it will contain the error message.								try				{					PrimeNumberGenerator();				}				catch(IOException e) // e is the parameter name we like to use				{					System.out.println(e);				}							} 			else if (menuOption == 3) 			{ 				// Write a try-catch statement and place the call to FibonacciGenerator				// in the try branch.  The catch clause will catch a thrown IOException				// where the message is returned from the method and stored in the 				// parameter e, so just print e ... it will contain the error message.				try				{					FibonacciGenerator ();				}				catch(IOException e)				{					System.out.println(e);				}			} 			else if (menuOption == 4) 			{				// Write a try-catch statement and place the call to GCDFinder				// in the try branch.  The catch clause will catch a thrown IOException				// where the message is returned from the method and stored in the 				// parameter e, so just print e ... it will contain the error message.				try				{					GCDFinder ();				}				catch(IOException e)				{					System.out.println(e);				}			} 			else if (menuOption == 5)			{				try 				{					System.out.println("Enter any number except zero: ");					int divisor = reader.nextInt();					DivideByParam(divisor); 				} 				catch (ArithmeticException e)				{				// exception message e is in method DivideByParam					System.out.println(e);  				} 			}			else if (menuOption == 6)  						System.out.println("Goodbye!");		// User quits, sign off			else 			{  				System.out.println ("Invalid option");			}		}			System.out.println ("Program has terminated.");	} // end of main method	// Sample method that throws an ArithmeticException	public static void DivideByParam (int divisor)	{		if(divisor == 0)			throw new ArithmeticException ("You cannot divide by zero");		int result = 100 / divisor;		System.out.println("The result of the dividing 100 by your number " + divisor + " is " + result);	}	// NO CODE TO ADD TO THIS METHOD	public static void MultiplicationTable()	{			System.out.printf("%32s%n", "Multiplication Table");		System.out.printf("%32s%n", "--------------------");		System.out.printf("%40s%n", "(  Generated by nested for loops  )");		System.out.println();		System.out.printf("%4s", "  ");		for (int i = 1; i <=10; ++i)			System.out.printf("%4d", i);		System.out.println();		System.out.println("----|----------------------------------------");		for (int row = 1; row <= 10; ++row)		{  			// print first part of one row			System.out.printf("%2d %2s", row, "|");			// print the remainder of the row in loop			for (int column = 1; column <= 10; ++column)				System.out.printf("%4d", row * column);			System.out.println(); 		}  // end of each row 		System.out.println();		System.out.println();		}	// Modify this method so that it throws an IOException that returns the error	// message:  "Error!  You must enter a positive integer for the lower limit!"	// if a value is entered for lower that is less than or equal to zero.	// Modify this method so that it throws an IOException that returns the error	// message:  "Error!  The upper limit must be greater than the lower limit."	// if a value is entered for upper that is less than or equal to lower.	public static void PrimeNumberGenerator () throws IOException	{			Scanner reader = new Scanner(System.in);			int innerLimit, d, lower, upper;		System.out.print("Enter a positive integer for the lower limit:  ");		lower = reader.nextInt();		// Replace the next loop with a Throw Statement that contains the 		// message "Error!  You must enter a positive integer for the lower limit!"		// You should throw an exception of type IOException.		if (lower <= 0)		{			throw new IOException("Error!  You must enter a positive integer for the lower limit!");		}		System.out.print("The upper limit must be greater than the lower limit. Enter the upper limit:  ");		upper = reader.nextInt();		// Replace the next loop with a Throw Statement that contains the 		// message "Error!  The upper limit must be greater than the lower limit."		// You should throw an exception of type IOException.		if (upper <= lower)		{			throw new IOException("Error!  The upper limit must be greater than the lower limit.");		}		System.out.println();		for (int n = lower; n <= upper; n++)		{			innerLimit = (int) Math.sqrt(n);			// see comment below			for (d = 2; d <= innerLimit; d++)			{				if (n % d == 0)					break;			}			if (d > innerLimit)				System.out.println(n + " is prime!");		}				}	// Modify this method so that it throws an IOException that returns the error	// message:  "Error!  You must enter a positive integer between 1 and 46!"	public static void FibonacciGenerator () throws IOException	{			Scanner reader = new Scanner(System.in);		int n;				// the number entered by the user		int fibonacciNumber;			// The nth fibonacci number		int firstTerm, secondTerm, count;	// variables that facilitate the computation		System.out.println ("Enter a positive integer between 1 and 46: ");		n = reader.nextInt();		// Replace the next loop with a Throw Statement that contains the 		// message "Error!  You must enter a positive integer between 1 and 46!"		// You should throw an exception of type IOException.		fibonacciNumber =1;		firstTerm = 1; 		secondTerm = 1;		count = 3;				if(n > 46 || n < 1)		{						throw new IOException("Error!  You must enter a positive integer between 1 and 46!");		}			while (count <= n)  // Takes care of the cases when n >= 3		{  			fibonacciNumber = firstTerm + secondTerm;			firstTerm = secondTerm;			secondTerm = fibonacciNumber;			count++;		}				System.out.println ("The Fibonacci number at position " + n + " is " + fibonacciNumber);	}			// Modify this method so that it throws an IOException that returns the error	// message:  "Error!  You must enter a positive integer for the smaller integer!"	// if a value is entered for smaller that is less than or equal to zero.	// Modify this method so that it throws an IOException that returns the error message:	// "Error! Enter a positive integer for the larger number that is greater than " + smaller	// if a value is entered for larger that is less than or equal to smaller.	public static void GCDFinder () throws IOException	{		Scanner reader = new Scanner(System.in);		int smaller;		int larger;		System.out.println("Both the smaller & larger number should be greater than zero.");		System.out.print("Enter a positive integer for the smaller number: ");		smaller = reader.nextInt();		// Replace the next loop with a Throw Statement that contains the 		// message "Error!  You must enter a positive integer for the smaller number!"		// You should throw an exception of type IOException.		if (smaller <= 0)		{			throw new IOException("Error!  You must enter a positive integer for the smaller number!");		}		System.out.print("Enter a positive integer for the larger number: ");		larger =  reader.nextInt();		// Replace the next loop with a Throw Statement that contains the 		// message "Error! Enter a positive integer for the larger number that is greater than " + smaller		// You should throw an exception of type IOException.		if ( larger < smaller)  // larger <= 0 is unnecessary since smaller is > 0		{			throw new IOException("Error! Enter a positive integer for the larger number that is greater than " + smaller);		}		int GCD = 1;		int factor = 2;				while ( factor <= smaller)		{				if ((smaller % factor == 0) && (larger % factor == 0))			{				GCD *= factor;				smaller /= factor;				larger /= factor;			}			else				factor++;		}		System.out.println("The GCD is " + GCD);	}} // end MathMenuDriverWithTryCatch class