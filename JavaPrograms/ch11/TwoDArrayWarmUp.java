// Chapter 11 Program #1// TwoDArrayWarmUp.java// non-graded collaborative programpackage ch11;import java.util.Scanner;public class TwoDArrayWarmUp {	public static void main (String[] args)	{			Scanner reader = new Scanner (System.in);		// ********* Part 1.  2D Array of integer values *****************		// Declare and instantiate the two-dimensional array named table1		// so that it will contain 7 rows and 7 columns of integer values.		int table1 [][] = new int [7][7];		// Write nested loops to fill the two dimensional array table1		// with random integers between 10 inclusive and 99 inclusive.		// Use row and col as your loop control variables and DO NOT USE		// numbers for the upper limits of the two loops.		for (int row = 0; row < 7; row++)		{			for (int col = 0; col < 7; col++)				table1[row][col] = (int)(Math.random()*90 + 10);		}						System.out.println("Here are the random integer values in table 1:");		System.out.println();		// Stop and write the method print2DArrayOfInts below		// and then call it here passing it table1.		print2DArrayOfInts(table1);		System.out.println();		System.out.println();		System.out.println("Here are the multiples of 10 in the 2D Array of random integer values:");		System.out.println();		// Stop and finish the method printMultiplesOfTen below		// and then call it here passing it table1.		printMultiplesOfTen(table1);		System.out.println();		System.out.println();		System.out.print("Enter the number of rows for a new 2D array of ints: ");		int rows = reader.nextInt();		System.out.print("Enter the columns of rows for a new 2D array of ints: ");		int cols = reader.nextInt();		// Stop and write the method storeMultiplesOfFive below main and 		// then call it here passing it the number of rows and columns that		// were entered from the keyboard above.  In the method, a 2D array		// will be constructed and returned.  Since the method returns a 2D array,		// declare (but don't construct) a two-dimensional array of integers		// named multiplesOfFive that will catch the returned value.		int [][] multiplesOfFive = storeMultiplesOfFive(rows, cols);				System.out.println("Here are the contents of the multiplesOfFive array:");		System.out.println();		// Call the method print2DArrayOfInts passing it the array multiplesOfFive		// so that it is printed.		print2DArrayOfInts(multiplesOfFive);						System.out.println();		System.out.println();				// ********* Part 2.  2D Array of floating-point values *****************				// Declare and instantiate the two-dimensional array named table2		// that will have 4 rows and 8 columns and hold floating-point values.		double [][] table2 = new double[4][8];		// Write a nested looping structure that will store random floating-point values		// between 1000.0 inclusive and 10,000 exclusive in table2. Use row and col as your		// loop control variables and DO NOT USE numbers for the upper limits of the two loops.		for (int row = 0; row < table2.length; row++)		{			for (int col =0; col < table2[row].length; col++)			{				table2[row][col] = Math.random()*9000.0 +1000.0;			}		}						System.out.println("Here are the random floating-point values in table2:");		System.out.println();		// Stop and write the method print2DArrayOfFloats below		// and then call it here passing it table2.		print2DArrayOfFloats(table2);		System.out.println();		System.out.println();		System.out.println("Here are the random floating-point values less than 2,000:");		System.out.println();		// Stop and write the method printFloatsLessThan2000 below		// and then call this method and pass it table2.		printFloatsLessThan2000(table2);		System.out.println();		System.out.println();				// ********* Part 3.  2D Array of String values *****************				// Write an initializer list that will store the following letters		// in a one-dimensional array named letters:		// "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"		String [] letters = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"};						// Stop and write the method makeLetterChart near the end of this file.		// Since the method returns a 2D array, declare (but don't construct) a		// two-dimensional array of Strings named table3 that will catch the returned value.		// When calling makeLetterChart here, pass it the one-dimensional array named letters.		String [][] table3 = makeLetterChart(letters);				System.out.println("Here is the letter chart in Row-Major Order:");		System.out.println();		// Stop and write the method printLetterChartRowMajorOrder below and then call it		// here passing it table3 so the values are printed in Row-Major order.		printLetterChartRowMajorOrder(table3);				System.out.println();		System.out.println();				System.out.println("Here is the letter chart in Col-Major Order:");		System.out.println();				// Stop and write the method printLetterChartColMajorOrder below and then call it		// here passing it table3 so the values are printed in Col-Major order.		printLetterChartColMajorOrder(table3);						System.out.println();		System.out.println();		System.out.println("Program Terminated.");	} // end main			// Write the method print2DArrayOfInts.  It does not return a value.	// It receives a two dimensional array of integers named table as a	// parameter. THE TWO DIMENSIONAL ARRAY TABLE CAN BE ANY SIZE.	// It prints all the values stored in the two dimensional array so	// that you see all the values printed in rows and columns.  Use a	// printf statement with a field width of 6 to print each value in the	// array.  This method should print the values in the table no matter	// how many rows and columns the table has.  See sample output on line.	// See sample output on line.	public static void print2DArrayOfInts(int[][]table)	{		for (int row = 0; row < table.length; row++)		{			for (int col = 0; col < table[row].length; col++)			{				System.out.printf("%6s",table[row][col]);			}			System.out.println();		}	}			// Write the method printMultiplesOfTen.  It does not return a value.	// It receives any two-dimensional array of integers as a parameter named	// table and prints only the multiples of 10 stored in the array ALL ON ONE LINE.	// Use a printf statement with a field width of 8 to print each multiple of 10.	// See sample output on line.	public static void printMultiplesOfTen(int [][] table)	{		for (int row = 0; row < table.length; row++)		{			for (int col = 0; col < table[row].length; col++)			{				if(table[row][col] %10 == 0)					System.out.printf("%8s", table[row][col]);			}		}	}			// Write the method storeMultiplesOfFive.  The method receives two parameters:	// the number of rows and the number of columns.  The method declares, constructs,	// and fills a two-dimensional array of integers that has the number of rows and	// columns received by this method.  In this method, you will write a looping	// structure to store only multiples of 5 in the two-dimensional array.  The first	// value in the first row of the array will always be 5.  For example, if the	// method receives values of 3 for the number of rows and 4 for the number of	// columns, then the values stored in array will be the value in these positions:	//	//	 	 5   10   15   20	//		25   30   35   40	//		45   50   55   60	//	// If the method receives values of 2 for the number of rows and 7 for the number	// of columns, then the values stored in array will be these values in these positions:	//	//	 	  5   10   15   20   25   30   35	//	    40	   45   50   55   60   65   70	//	// DO NOT PLACE INTEGER VALUES AS THE UPPER LIMIT OF THE LOOPS. WRITE THE CODE GENERICALLY!	// THIS METHOD DOES NOT PRINT ANY VALUES!!!  IT ONLY CONSTRUCTS AND RETURNS AN ARRAY WITH	// MULTIPLES OF FIVE.  (THEY WILL BE PRINTED LATER.)    See sample output on line.	public static int[][]  storeMultiplesOfFive (int rows, int cols)	{		int [][] mult5 = new int [rows][cols];		int num = 5;		for (int i = 0; i < rows; i++)		{			for(int j = 0; j < cols; j++)			{				mult5[i][j] = num;				num+=5;			}		}		return mult5;	}			// Write the method print2DArrayOfFloats.  It does not return a value.	// It receives a two dimensional array of floating-point values in a	// parameter named table.  It prints all the values stored in the two	// dimensional array no matter what the size of the 2D array.	// It prints all the values stored in the two dimensional array so	// that you see all the values printed in rows and columns.  Use a	// printf statement with a field width of 10 and a precision of 3.	// This method should print the values in the table no matter how many	// rows and columns the table has.  See sample output on line.	public static void print2DArrayOfFloats(double [][] table)	{		for (int row = 0; row < table.length; row++)		{			for(int col = 0; col < table[row].length; col++)			{				System.out.printf("%10.3f", table[row][col]);			}			System.out.println();		}	}			// Write the method printFloatsLessThan2000.  It does not return a value.	// It receives a two dimensional array of floating-point values as a	// parameter named table.  It prints all the values stored in the two dimensional	// array that are less than 2000.0 ALL ON ONE LINE using a printf statement	// with a field width of 10 and a precision of 3.  See sample output on line.	public static void printFloatsLessThan2000(double [][] table)	{		for (int row = 0; row < table.length; row++)		{			for(int col = 0; col < table[row].length; col++)			{				if (table [row][col] < 2000.0)				System.out.printf("%10.3f", table[row][col]);			}		}	}				// Write the method makeLetterChart.  It returns a two-dimensional array of	// String values.  It receives one parameter that is a one-dimensional array	// of type String named letters.  This method will declare and construct a	// two-dimensional array named letterChart that will be returned.  This new	// array will have 3 rows and 4 columns. This method will copy all of the names	// from the letters array to seatingChart in row-major order beginning with	// the first String value in letters.  Note:  because the total number of letters	// in the letters array (12) is equal to the total number of memory locations in	// letterChart, we can use a standard approach of traversing the two-dimensional	// array and placing a value from the letters array into each memory location of	// letterChart. Therefore, letterChart will be full when the process is complete.	public static String [][] makeLetterChart(String [] letters)	{		String[][] letterChart = new String [3][4];		int i = 0;        for (int row = 0; row < letterChart.length; row++)        {              for (int col = 0; col < letterChart[row].length; col++)              {                    letterChart[row][col] = letters[i];                    i++;               }        }		return letterChart;	}				// Write the method printLetterChartRowMajorOrder.  It does not return	// a value.  It receives a two dimensional array of String values named	// letterChart. However, THE TWO DIMENSIONAL ARRAY TABLE CAN BE ANY SIZE.	// This method should print the values in the table no matter how many rows	// and columns the table has.  It prints all the values stored in the	// two dimensional array in ROW-MAJOR order so that you see all the values	// printed in rows and columns.  Use a printf statement with a field width	// of 4 to print each value in the array.  	public static void printLetterChartRowMajorOrder (String [ ] [ ] letterChart)    {          for (int row = 0; row < letterChart.length; row++)          {                for (int col = 0; col < letterChart[0].length; col++)                {                      System.out.printf("%4s", letterChart[row][col]);                }                System.out.println();          }    }			// Write the method printTableColMajorOrder.  It does not return	// a value.  It receives a two dimensional array of String values named	// letterChart. However, THE TWO DIMENSIONAL ARRAY TABLE CAN BE ANY SIZE.	// This method should print the values in the table no matter how many rows	// and columns the table has.  It prints all the values stored in the	// two dimensional array in COL-MAJOR order so that you see all the values	// printed in rows and columns.  Use a printf statement with a field width	// of 4 to print each value in the array. 	 public static void printLetterChartColMajorOrder (String [ ] [ ] letterChart)     {           for (int col = 0; col < letterChart[0].length; col++)           {                 for (int row = 0; row < letterChart.length; row++)                 {                       System.out.printf("%4s", letterChart[row][col]);                 }                 System.out.println();           }     }				} // end TwoDArrayWarmUp class