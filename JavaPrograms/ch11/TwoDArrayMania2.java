// Two-Dimensional Array of Employee Objects Program.// TwoDArrayMania2.javapackage ch11;import ch11.Employee;public class TwoDArrayMania2 {	public static void main (String[] args)	{			// No code to write here.  All errors will go away after the Employee		// class is written correctly.  This code constructs 11 company employees		// all with different data.		Employee emp1 = new Employee ("Anna", "female", 15.50, "accounting");		Employee emp2 = new Employee ("Steve", "male", 14.75, "sales" );		Employee emp3 = new Employee ("Carrie","female", 16.25, "tech");		Employee emp4 = new Employee ("George", "male", 16.60, "tech");		Employee emp5 = new Employee ("Laura", "female", 14.35, "accounting");		Employee emp6 = new Employee ("Amber", "female", 16.85, "tech");		Employee emp7 = new Employee ("Chris", "male", 15.35, "accounting");		Employee emp8 = new Employee ("Sarah", "female", 12.40, "sales");		Employee emp9 = new Employee ("John", "male", 15.75, "accounting");		Employee emp10 = new Employee ("Paul", "male", 11.10, "sales");		Employee emp11 = new Employee ("Bill", "male", 15.85, "tech");		// Place all 11 employees in an array named employees.		Employee [ ] employees = {emp1, emp2, emp3, emp4, emp5, emp6, emp7, emp8, emp9, emp10, emp11};		// Stop and call the method printEmployees and then call it here passing it		// the employees array.		printEmployees(employees);								// Stop and write the method genderParser and then call it here		// passing it the employees array.  The method will return a		// two-dimensional array of Employee objects that will be stored in		// a two-dimensional array variable named genderTable.		Employee [][] genderTable = genderParser(employees);		System.out.println("Here is the output of the Company Gender Table.");		System.out.println("The first row is female employees and the second row male.");		System.out.println();		// Stop and write the method printEmployeeNames below		// and then call it passing it the genderTable array.		printEmployeeNames(genderTable);		System.out.println();		System.out.println();				// Stop and write the method companyOrganizer and then call it here		// passing it the employees one-dimensional array.  The method will return a		// two-dimensional array of Employee objects that will be stored in		// a two-dimensional array variable named companyTable.		Employee [][]	companyTable = companyOrganizer(employees);		System.out.println("Here is the output of the Company Department Table:");		System.out.println("The first row is accounting employees.");		System.out.println("The second row is sales employees. ");		System.out.println("The thrid row is tech employees.");				System.out.println();		// Call the method printEmployeeNames and pass it the companyTable array.		printEmployeeNames(companyTable);		System.out.println();		System.out.println();				System.out.println("Here is a print out of the company table BEFORE raises:");				// Stop and write the method printEmployeeTable at the bottom of this file and		// then call it here passing it companyTable.		printEmployeeTable(companyTable);		System.out.println();	System.out.println();		// Stop and write the method giveRaiseToTechEmployees at the bottom of this file		// and then call it here passing it companyTable.		giveRaiseToTechEmployees(companyTable);		System.out.println("Here is a print out of the company table AFTER raises:");				// Call the method printEmployeeTable a second time here to print the		// companyTable after the raises have been given the tech employees.		printEmployeeTable(companyTable);				System.out.println("Program Terminated.");	} // end main		// Write the method printEmployees.  This method receives a one-dimensional array	// named employees and does not return a value.  This method will print all of the	// Employees in employees by calling the toString method of the Employee class.	// Just use a System.out.println() statement to print an employee.	public static void printEmployees(Employee [] employees)	{		for(Employee element: employees)			System.out.println(element.toString());	}					// Write the method genderParser.  It receives one parameter, a one-dimensional	// array of Employee objects named employees.  It returns a two-dimensional array	// of Employee objects named genderTable.  Construct genderTable to have 2 rows	// and 20 columns.  We will assume that we won't have more than 20 female or 20	// male employees working for the company.	// Write the code that will store all of the female employees in the first row of	// genderTable and all of the male employees in the second row of genderTable.	// I suggest using the variables femaleCount & maleCount to track where you are	// placing the female and male employees in the appropriate row. You should	// increment them as you add an employee to a row so there will be no gaps.	// You only need to use one loop in this method to loop across the employees array.	public static Employee [][] genderParser(Employee [] employees)	{		Employee [][]genderTable = new Employee [2][20];		int femaleCount = 0;		int maleCount = 0;		for (Employee element: employees)		{			if (element.getGender() == "female")			{				genderTable[0][femaleCount] = element;				femaleCount++;			}			else			{				genderTable [1][maleCount] = element;				maleCount++;			}		}		return genderTable;	}								// Write the method printEmployeeNames.  It does not return a value.	// It receives one parameter, a two dimensional array of Employee objects	// named employeeTable.  This method prints only the names of the Employee objects	// stored in the two dimensional array. All of the employees in a row of the	// array will be printed on one line. Each name should be printed left-justified	// using a printf statement using a field width of 13.	// THIS METHOD SHOULD WORK FOR ANY SIZE TWO-DIMENSIONAL ARRAY.	// NOTE:  you will be printing only the valid part of each row.  Realize that	// there may be null values in the last part of any row of the 2D array.  So you	// don't want to print any null values!!!  To do this, check the memory location	// first to see if it contains null.  If it does, then don't print it!	// THIS METHOD MUST USE NESTED ENHANCED FOR LOOPS TO PRINT THE NAMES!!		// TO TEST WHETHER AN OBJECT IS NULL, THEN USE == NOT COMPARETO.	// For example if you get an Employee out of the employees array and reference	// it with an Employee variable named employee, then you can do either of the	// following tests:   if (employee == null)   OR  if (employee != null)	public static void printEmployeeNames(Employee [][] employeeTable)	{		for (int row = 0; row < employeeTable.length; row++)		{			for(int col = 0; col < employeeTable[row].length; col++)			{				if (employeeTable[row][col] != null)					System.out.printf("%13s", employeeTable[row][col].getName());			}			System.out.println();				}	}											// Write the method companyOrganizer.  It returns a two-dimensional array of	// Employee objects named companyTable.  It receives one parameter, a	// one-dimensional array of Employee objects named employees.  This method will	// declare and instantiate a new two-dimensional array named companyTable that	// will have 3 rows and 10 columns.  This method will ...	//		copy all of the accounting employees to the first row of companyTable	//		copy all the sales employees to the second row of companyTable	// 		copy all the tech employees to the third row of companyTable	// The method then returns companyTable.  You'll probably need some variables	// to track how many Employees you have placed in each row.  How about using	// the variables acctCount, salesCount, and techCount.	public static Employee [][] companyOrganizer(Employee [] employees)	{		Employee [][] companyTable = new Employee [3][10];		int acctCount = 0;		int salesCount = 0;		int techCount = 0;		for (Employee element: employees)		{			if(element.getDept() == "accounting")			{				companyTable[0][acctCount] = element;				acctCount++;			}			else if (element.getDept() == "sales")			{				companyTable[1][salesCount] = element;				salesCount++;			}			else if (element.getDept() == "tech")			{				companyTable[2][techCount] = element;				techCount++;			}		}		return companyTable;	}								// Write the method giveRaiseToTechEmployees that receives a two-dimensional	// array of Employee objects named allEmployees.  This method does not return	// anything.  This method traverses allEmployees and first checks to make sure	// that the employee is not null.  If it isn't, then it checks to see if the	// employee is a "tech" employee.  When it finds a "tech" employee, then it 	// gives him or her a raise of 10%.	public static void giveRaiseToTechEmployees(Employee [][] allEmployees)	{		double pay = 0.0;		double newPay =0.0;		for (int row = 0; row < allEmployees.length; row++)		{			for(int col = 0; col < allEmployees[row].length; col++)			{				if (allEmployees[row][col] != null)				{					if(allEmployees[row][col].getDept() == "tech")						{							pay = allEmployees[row][col].getPayRate();							newPay = pay * 1.1;							allEmployees[row][col].setPayRate(newPay);						}				}			}		}	}						// Write the method printEmployeeTable that receives a two-dimensional	// array of Employee objects named employeeTable.  This method does not	// return a value.  This method will print all information for each	// employee that is not null.  Don't use a printf statement.  Just use a	// println statement and call toString of the Employee class.	public static void printEmployeeTable (Employee [][] employeeTable)	{		for (int row = 0; row < employeeTable.length; row++)		{			for(int col = 0; col < employeeTable[row].length; col++)			{				if (employeeTable[row][col] != null)					System.out.println(employeeTable[row][col].toString());			}			System.out.println();		}	}						} // end of TwoDArrayMania2 class