// Chapter 11 Program #2// TwoDArrayMania1.javapackage ch11;import java.io.IOException;import java.util.Scanner;public class TwoDArrayMania1 {	static Scanner reader = new Scanner (System.in);	public static void main (String[] args)	{			// ********* Part 1.  2D Array of integer values *****************		// Declare and instantiate the two-dimensional array named table1		// so that it will contain 5 rows and 10 columns of integer values.				int [][] table1 = new int [5][10];		// Write nested loops to fill the two dimensional array table1		// with random integers between -100 inclusive and 100 inclusive.		// Use row and col as your loop control variables.		// Use generic code for the upper limit of the loops - NOT numbers.		for (int row = 0; row < table1.length; row++)		{			for (int col = 0; col < table1[row].length; col++)				table1[row][col] = (int)( Math.random()*201 -100);		}						System.out.println("Here is table in Row Major Order:");		System.out.println();		// Stop and finish the method printTableRowMajorOrder after the main method and		// then call it here passing it table1.		printTableRowMajorOrder(table1);				System.out.println();		System.out.println();		System.out.println("Here is table in Col Major Order:");		System.out.println();		// Stop and finish the method printTableColMajorOrder after the main method and		// then call it here passing it table1.		printTableColMajorOrder(table1);				System.out.println();		System.out.println();		System.out.println("Here is table in Zig Zag Order:");		System.out.println();		// Stop and finish the method printTableZigZagOrder after the main method and then		// call it here passing it table1.		printTableZigZagOrder (table1);				System.out.println();		System.out.println();		// Assume the following one-dimensional array containing these values.		int [ ] nums = {0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4};		// Stop and write the method makeFiveByFiveIntTable after the main method and 		// then call it here passing it the one-dimensional array nums.  Store the value 		// returned by the method in the two-dimensional array of ints named table2.		int[][] table2 = makeFiveByFiveIntTable(nums);				// Call the method printTableRowMajorOrder and pass it table2 so those values are printed.		printTableRowMajorOrder(table2);				System.out.println();		System.out.println();		// ********* Part 2.  2D Array of floating-point values *****************		// Declare and construct a One-Dimensional array of doubles named floats		// that will hold 12 double values.		double [] floats = new double [12];		// Write the code to store 12 random double values between -20 inclusive		// and 20 exclusive in the floats array.		for (int i =0; i < floats.length; i++)			floats[i]= Math.random()*40 - 20;						// Write a loop that will print all the values of floats all on one line		// in a field width of 8 with a precision of 2.		for (int i =0; i < floats.length; i++)			System.out.printf("%8.2f", floats[i]);				System.out.println();		System.out.println();		// Stop and write the method organizeFloats after the main method and then		// call it here and pass it the floats array.  This method will return a		// two-dimensional array of doubles.  Store it in the two-dimensional array		// of doubles variable named table3.		double [][] table3 = organizeFloats(floats);				// Stop and write the method printFloats after the main method and then		// pass it table3 so the values are printed.		printFloats(table3);				System.out.println();		System.out.println();			// ********* Part 3.  2D Array of String values *****************		// Assume the following one-dimensional array containing these values.		String [] teams = {"Cards", "Cats", "Hoosiers", "Toppers",				"Colonels", "Racers", "Knights", "Eagles"};		// Stop and write the method makePuzzle after the main method and then call		// it here.  Pass the method the array teams.  The method will return a		// two-dimensional array of String values.  Store the returned value in the		// two-dimensional array variable named puzzle.  (Just declare but don't		// instantiate puzzle)		String [][] puzzle = makePuzzle(teams);				// Stop and write the method printPuzzleTable after the main method and then		// call it here.  Pass the method the two-dimensional array named puzzle. 		printPuzzleTable(puzzle);					System.out.println("Select your first team.");		String team1 = "";		String team2 = "";				try		{			// Stop and write the method selectTeam after the main method and then call it			// here passing it the two-dimensional array named puzzle.  Store the value			// returned by the method in the String variable named team1.				team1 = selectTeam(puzzle);					}		catch (IOException e)		{			System.out.println(e);		}		System.out.println();		System.out.println("Now select your second team.");				try		{			// Call the method selectTeam again and pass it the two-dimensional array			// named puzzle.  This time store the returned value in the String variable team2.			team2  = selectTeam(puzzle);					}		catch (IOException e)		{			System.out.println(e);		}		System.out.println();		// Write a branching structure that will print either of the following two		// messages based on a comparison of the two variables team1 and team2.		// If the teams match, the message: "Congratulations the two teams ? and ? Match!"		// should be printed.  If the teams do not match, then the message printed		// should be:  "Sorry the two teams ? and ? don't Match!"  (see sample output online)		if (team1.compareTo(team2)==0)			System.out.println("Congratulations the two teams " + team1 + " and " + team2 +  " Match!");		else			System.out.println("Sorry the two teams " + team1 + " don't " + team2 +  " Match!");				System.out.println();		System.out.println();		System.out.println("Program Terminated.");	} // end main		// Write the method printTableRowMajorOrder.  It does not return a value.	// It receives a two dimensional array of integers named table as a	// parameter. THE TWO DIMENSIONAL ARRAY TABLE CAN BE ANY SIZE.	// It prints all the values stored in the two dimensional array in	// ROW-MAJOR order so that all the values are printed in rows and columns.	// Use a printf statement with a field width of 5 to print each value in	// the array.  This method should print the values in the table no matter	// how many rows and columns the table has. SEE SAMPLE OUTPUT ON LINE.	public static void printTableRowMajorOrder (int [][] table)	{		for (int row = 0; row < table.length; row++)		{			for (int col = 0; col < table[row].length; col++)				System.out.printf("%5s", table[row][col]);		System.out.println();		}	}						// Write the method printTableColMajorOrder.  It does not return a value.	// It receives a two dimensional array of integers named table as a	// parameter. THE TWO DIMENSIONAL ARRAY TABLE CAN BE ANY SIZE.	// It prints all the values stored in the two dimensional array in	// COL-MAJOR order so that all the values are printed in rows and columns.	// Use a printf statement with a field width of 5 to print each value in	// the array.  This method should print the values in the table no matter	// how many rows and columns the table has. SEE SAMPLE OUTPUT ON LINE.	public static void printTableColMajorOrder (int [][] table)	{		for (int col = 0; col < table[0].length; col++)		{			for (int row = 0; row < table.length; row++)				System.out.printf("%5s", table[row][col]);		System.out.println();		}	}				// Write the method printTableZigZagOrder.  It does not return a value.	// It receives a two dimensional array of integers named table as a	// parameter. THE TWO DIMENSIONAL ARRAY TABLE CAN BE ANY SIZE.	// It prints all the values stored in the two dimensional array in a	// ZIG-ZAG order as described below so that all the values in the array	// are printed.  Use a printf statement with a field width of 5 to print	// each value in the array.  This method should print the values in the	// table no matter how many rows and columns the table has.	// SEE SAMPLE OUTPUT HERE AND ON LINE.	// For example, if the following values are stored in the array in the	// following standard ROW-MAJOR order .....	/*	-82     1    41   -81   -56    91    51   -77    10   -48    63   -60   -61    43    45    -3   -65   -76    64     0    85     4    53   -37   -33    22   -62    76    25    83    14   -44    48    10   -65    26    24   -69    13    96   -46   -66   -13    -9   -28   -55    45    -8   -56    65	then if the values were printed in Zig Zag Order the output would look	like this:   -82     1    41   -81   -56    91    51   -77    10   -48     0    64   -76   -65    -3    45    43   -61   -60    63    85     4    53   -37   -33    22   -62    76    25    83    96    13   -69    24    26   -65    10    48   -44    14   -46   -66   -13    -9   -28   -55    45    -8   -56    65   Notice that row 0, row 2, and row 4 are printed in forward order and   row 1 and row 3 are printed in reverse order.  So all "even rows" will   be printed in forward order and all "odd rows" will be printed in reverse order.	 */	public static void printTableZigZagOrder(int [][] table)	{		int rowLnth =0;		int colLnth=0;		for (int row = 0; row < table.length; row++)		{			for (int col = 0; col < table[row].length; col++)			{				if (row%2 !=0)				{					colLnth = table[row].length -(col+1);					System.out.printf("%5s", table[row][colLnth]);				}				else					System.out.printf("%5s", table[row][col]);			}		System.out.println();		}	}					// Write the method makeFiveByFiveIntTable that receives one parameter,	// a one-dimensional array of integers named nums and returns a new	// 5 by 5 two-dimensional array of integers named table.  This method	// fills table in Row-Major order as it takes values from nums.	// Precondition:  before the method is executed, the array nums will	// hold exactly 25 integers.	// Postcondition:  after the method is executed, the array table will	// be completely filled with integer values from nums.	public static int[][] makeFiveByFiveIntTable(int [] nums)	{		int [][] table = new int [5][5];		for (int row = 0; row < table.length; row++)		{			for (int col = 0; col < table[row].length; col++)				table [row][col] = nums[col];		}		return table;	}			// Write the method organizeFloats that receives one parameter,	// a one-dimensional array of doubles named floats and returns a new	// two-dimensional array of doubles named table that has two rows and	// floats.length number of columns.  This method fills the two rows in	// the table from left to right as it places all negative values in the	// first row of the table and all positive values (including zero) in	// the second row of the table based on the order they are taken from floats.  	// Precondition:  before the method is executed, the array nums will	// hold any number of doubles.	// Postcondition:  after the method is executed, the array table will	// be partially filled with double values from floats with all of the	// negative values of floats in the first row of table and all positive	// values from floats in the second row of the table.	public static double [][] organizeFloats(double [] floats)	{		int col = 0;		int col2=0;		double [][] table = new double [2][floats.length];		for (int i = 0; i< floats.length; i++)		{			if (floats[i] < 0)			{				table[0][col] = floats[i];				col++;				}			else if (floats[i] >= 0)			{				table[1][col2] = floats[i];				col2++;			}		}		return table;	}				// Write the method printFloats.  It does not return a value.	// It receives a two dimensional array of doubles named table as a	// parameter. THE TWO DIMENSIONAL ARRAY TABLE CAN BE ANY SIZE.	// It prints all the values stored in the two dimensional array in	// ROW-MAJOR order so that all the values are printed in rows and columns.	// Use a printf statement with a field width of 8 and a precision of 2 to	// print each value in the array.  This method should print the values in	// the table no matter how many rows and columns the table has.	//  SEE SAMPLE OUTPUT ON LINE.	public static void printFloats(double [][] table)	{		for (int row = 0; row < table.length; row++)		{			for (int col = 0; col < table[row].length; col++)			{				System.out.printf("%8.2f", table[row][col]);			}			System.out.println();		}	}			// Write the method makePuzzle that receives a one-dimensional array of	// String values named teams.  The method returns a two-dimensional array	// of String values.  This method should place all of the teams from the	// teams one-dimensional array twice in a newly constructed two-dimensional	// array named puzzle.	// Precondition:  before the method executes, the one-dimensional array of	// Strings parameter named teams has exactly 8 String values in it.	// Postcondition:  after the method executes, the two-dimensional array	// named puzzle has been constructed to hold String values in a configuration	// that has 4 rows and 4 columns. The two-dimensional array puzzle will be	// completely filled with String values and will contain no null values.	// The 2D array puzzle will contain each of the values in teams exactly twice	// in random order.	public static String[][] makePuzzle (String [] teams)	{		int ranR = 0;		int ranC = 0;		//int pos = 0;		String [][] puzzle = new String[4][4];		for(int cntr = 1; cntr <= 2; cntr++)		{			for (int i = 0; i < teams.length; i++)// places all 8 teams 1 time						{				ranR = (int) (Math.random()*4);				ranC = (int) (Math.random()*4);								if(puzzle[ranR][ranC] == null)							puzzle[ranR][ranC] = teams[i];				else					i--;			}		}		return puzzle;	}				// Write the method printPuzzleTable.  It does not return a value.	// It receives a two dimensional array of Strings named puzzle as a	// parameter. THE TWO DIMENSIONAL ARRAY PUZZLE CAN BE ANY SIZE.	// It prints all the values stored in the two dimensional array in	// ROW-MAJOR order so that all the values are printed in rows and columns.	// Print the values using a printf statement with a field width of 15 to	// print each value in the array.  This method should print the values in	// the table no matter how many rows and columns the table has.  Print two	// blank lines after each row of values.  SEE SAMPLE OUTPUT ON LINE.	public static void printPuzzleTable(String [][] puzzle)	{		for (int row = 0; row < puzzle.length; row++)		{			for (int col = 0; col < puzzle[row].length; col++)			{				System.out.printf("%15s", puzzle[row][col]);			}			System.out.println();			System.out.println();		}	}				// Finish the method selectTeam that receives a two-dimensional array	// of String values named puzzle.  The method returns a String value.	// The String value returned will be the String value in puzzle that	// is located at the position indicated from the values for row and	// col that are received from input.  After the errorMessage line below,	// you should prompt the user to enter the row value and read it, then	// prompt the user to enter the col and read it. Then, if the values are	// out of range, the method will throw an IOException with the message that	// is stored in the String variable errorMessage seen below.  This method	// already has access to the global Scanner variable named reader.	// Precondition:  this method receives a valid two-dimensional array	// with 4 rows and 4 columns containing String values.	// Postcondition:  the value returned is the value located at the	// position of the row and column indicated from input or an IOException	// is returned to be printed in the accompanying try-catch statement in main.	public static String selectTeam(String[][] puzzle) throws IOException	{				String errorMessage = "Row values must be between 0 & 3 inclusive\n"									+ "Col values must be between 0 & 3 inclusive\n";		int colSel = 0;		int rowSel = 0;		String selection = "";		System.out.print("Select a team by selecting first a row value(0-3): ");		rowSel = reader.nextInt();				if (rowSel < 0 || rowSel > 3)			throw new IOException(errorMessage);				System.out.print("Select a team by selecting first a col value(0-3): ");		colSel = reader.nextInt();		if (colSel < 0 || colSel > 3)			throw new IOException(errorMessage);				selection = puzzle[rowSel][colSel];		return selection;  // temporary return value - erase and rewrite.	}} // end TwoDArrayWarmUp class