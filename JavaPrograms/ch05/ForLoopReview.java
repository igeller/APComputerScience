// FileName:  ForLoopReview.java// Updated 10/30/12package ch05;import java.util.Scanner;public class ForLoopReview{	public static void main(String [] args) 	{			// Part 1. Negative or Positive!		// Write a for loop that will run 20 times.  Each time the loop runs it		// should generate a random floating-point value between -100 inclusive		// and 100 exclusive.  Output the information to the screen using a printf		// statement that formats the random value in a field width of 9 with a 		// precision of 4.  The output should look like this with varying values:		/*			 -33.4433 is negative			 -25.8115 is negative			 -49.4331 is negative			 -10.7710 is negative			 -69.3860 is negative			 -52.7814 is negative			  12.6866 is positive			 -62.4676 is negative			  86.4099 is positive			  69.2820 is positive			  88.4712 is positive			  15.7023 is positive			  93.0882 is positive			 -27.9901 is negative			  -1.6552 is negative			  42.3256 is positive			  62.2249 is positive			  16.1798 is positive			 -30.8613 is negative			 -48.3724 is negative		 */		double ranNum;				for(int cntr = 1; cntr <= 25; cntr++)		{			ranNum = Math.random()*200 - 100;						if(ranNum < 0)				System.out.printf("%9.4f is negative%n", ranNum);			else				System.out.printf("%9.4f is positive%n", ranNum);		}																// *************************************************************				System.out.println();		System.out.println();		// Part 2. Square and Square Root Fun!		// Write code that will receive an integer starting value and an		// integer ending value from the keyboard.  Then write a loop that		// will calculate and print the square root of any integer in that		// range that is a multiple of 7.  The loop should also calculate		// and print the square of any integer in that range that is a		// multiple of 9.  Output the information to the screen using a printf		// statement with these specs: "The square root of"  or "The square of"		// will be left justified in a field width of 20.  The integers from		// starting value to ending value should be right justified in a field		// width of 7.  The square root or square values (doubles) should be		// right justified in a field width of 12 with 5 places to the right of		// the decimal point.  The output should look like this if a starting		// value of 1 is entered and an ending value of 100 is entered:		/*			The square root of        7   is     2.64575			The square of             9   is    81.00000			The square root of       14   is     3.74166			The square of            18   is   324.00000			The square root of       21   is     4.58258			The square of            27   is   729.00000			The square root of       28   is     5.29150			The square root of       35   is     5.91608			The square of            36   is  1296.00000			The square root of       42   is     6.48074			The square of            45   is  2025.00000			The square root of       49   is     7.00000			The square of            54   is  2916.00000			The square root of       56   is     7.48331			The square root of       63   is     7.93725			The square of            63   is  3969.00000			The square root of       70   is     8.36660			The square of            72   is  5184.00000			The square root of       77   is     8.77496			The square of            81   is  6561.00000			The square root of       84   is     9.16515			The square of            90   is  8100.00000			The square root of       91   is     9.53939			The square root of       98   is     9.89949			The square of            99   is  9801.00000		 */		Scanner reader = new Scanner(System.in);		System.out.print("Enter the starting value: ");		int startingValue = reader.nextInt(); 		System.out.print("Enter the ending value: ");		int endingValue  = reader.nextInt();		// Part 2. Square and Square Root Fun!				// Write code that will receive an integer starting value and an				// integer ending value from the keyboard.  Then write a loop that				// will calculate and print the square root of any integer in that				// range that is a multiple of 7.  The loop should also calculate				// and print the square of any integer in that range that is a				// multiple of 9.  Output the information to the screen using a printf				// statement with these specs: "The square root of"  or "The square of"				// will be left justified in a field width of 20.  The integers from				// starting value to ending value should be right justified in a field				// width of 7.  The square root or square values (doubles) should be				// right justified in a field width of 12 with 5 places to the right of				// the decimal point.  The output should look like this if a starting				// value of 1 is entered and an ending value of 100 is entered:				double squareRoot;		double square;		for (int cntr = startingValue;  cntr < endingValue; cntr++)		{			if (cntr %7 == 0)			{				squareRoot = Math.sqrt(startingValue);				System.out.printf("%-20s%7d%5s%12.5f%n", "The square root of", cntr,"is", squareRoot);			}						if (cntr %9 == 0)			{				square = Math.pow(cntr, 2);				System.out.printf("%-20s%7d%5s%12.5f%n", "The square of", cntr,"is", square);			}		}																		// *************************************************************				System.out.println();		System.out.println();		// Part 3.  AVERAGE 20 ROLLS OF A DIE.		// Write a for loop that will run 20 times.  Each time the		// loop runs it will generate a random value for a die so		// that the rolling of a die is simulated.  Print each roll		// of the die to the output window along with the average		// value of all of the rolls of the die.		// Here is a sample run of the program for this code segment:			/*			Roll #1 is a 3			Roll #2 is a 6			Roll #3 is a 2			Roll #4 is a 4			Roll #5 is a 4			Roll #6 is a 6			Roll #7 is a 4			Roll #8 is a 6			Roll #9 is a 6			Roll #10 is a 1			Roll #11 is a 1			Roll #12 is a 1			Roll #13 is a 2			Roll #14 is a 6			Roll #15 is a 5			Roll #16 is a 1			Roll #17 is a 6			Roll #18 is a 6			Roll #19 is a 3			Roll #20 is a 3			The average of the 20 rolls of the die is 3.8		*/		int sum = 0;		double avg;		int dieVal;				for(int roll = 1; roll <= 20; roll++)		{			dieVal = (int) ((Math.random()*5) + 1);			System.out.println("Roll #" + roll + " is a " + dieVal);						sum += dieVal;		}		avg = sum/20;		System.out.println("The average of the 20 rolls of the die is " + avg);										// *************************************************************				System.out.println();		System.out.println();				// Part 4. FIVE LETTER WORD MAKER.		// Write a loop that will run 5 times.  Each time the loop runs		// the user will be asked to enter a letter from the keyboard.		// The letters will be concatenated together to form a five letter word.		// The five letter word will be printed only once after all five		// letters have been entered.		// Here is a sample run of the program for this code segment:			/*			Enter letter #1:  j			Enter letter #2:  a			Enter letter #3:  v			Enter letter #4:  a			Enter letter #5:  x			The Five Letter Word is javax		*/		reader.nextLine();		String word = "";																// *************************************************************		System.out.println();		System.out.println();		System.out.println("Program Terminated.");	}  // end main}