// FileName:  WhileLoopMania2.javapackage ch05;import java.util.Scanner;public class WhileLoopMania2{	public static void main(String [] args)	{			// Part 1.  SUMMING AND AVERAGING RANDOM FLOATING-POINT NUMBERS		// Write a while loop that will find the sum and average of five random		// floating-point numbers between 100.0 inclusive and 1000.0 exclusive.		// Each time a random value is generated it should be printed to the 		// console window using a printf statement that right justifies the random		// number in a field width of 10 with a precision of 6.  The values		/// 1, 2, 3, 4, & 5 should be right justified in a field width of 2.		// Once the sum is calculated it should be printed right justified in		// a field width of 14 with a precision of 6 and once the average is		// calculated it should be printed right justified in a field width of		// 10 with a precision of 6.		// DO NOT CALCULATE THE AVERAGE INSIDE THE LOOP!!		// Here is a sample run of the program for this code segment:		/*			Random value # 1 is 798.817200			Random value # 2 is 302.370939			Random value # 3 is 587.242859			Random value # 4 is 491.839310			Random value # 5 is 230.540535			The sum of the floating-point numbers is    2410.810843			The average of the floating-point numbers is 482.162169		 */		double sum = 0.0;		double average ;		int cntr = 1;				while(cntr <= 5)		{			double ranVal = Math.random()*900.0 + 100.0;			System.out.printf("Random Value #%2d is %10.6f%n", cntr, ranVal);			cntr++;							sum += ranVal;		}				System.out.printf("The sum of the floating-point numbers is %14.6f%n", sum);				average = sum/5;		System.out.printf("The average of the floating-point numbers is %10.6f", average);								// *******************************************************************		System.out.println();		System.out.println();			// Part 2.  CALCULATING AND DISPLAYING POWERS OF 2 AND THEIR SUM		// Write a loop that calculate and display the first 16 powers of 2 and 		// their sum.  Use a printf statement to output the exponent and its		// power.  Use a field width of 3 for the exponent		// and use a field width of 6 with a precision of 0 for the power of 2.		// After the loop is over print the sum of the powers of 2 using a 		// printf statement with a field width of 13 and a precision of 1.		// Here is a sample run of the program for this code segment:			/*			2 raised to the power of   1  is      2			2 raised to the power of   2  is      4			2 raised to the power of   3  is      8			2 raised to the power of   4  is     16			2 raised to the power of   5  is     32			2 raised to the power of   6  is     64			2 raised to the power of   7  is    128			2 raised to the power of   8  is    256			2 raised to the power of   9  is    512			2 raised to the power of  10  is   1024			2 raised to the power of  11  is   2048			2 raised to the power of  12  is   4096			2 raised to the power of  13  is   8192			2 raised to the power of  14  is  16384			2 raised to the power of  15  is  32768			2 raised to the power of  16  is  65536			The sum of the first 16 powers of 2 is      131070.0		 */		 int cntrPower = 1;		 double sumPower = 0.0;		 int powerOf2;		 		 while (cntrPower >=1 && cntrPower <=16)		 {			 powerOf2 = (int)(Math.pow(2, cntrPower));			 System.out.printf("2 raised to the power of %3d is %6d%n", cntrPower, powerOf2);			 cntrPower++;			 			 sumPower += powerOf2; 		 }		 		 System.out.println();		 System.out.printf("The sum of the first 16 powers of 2 is %13.1f", sumPower);										// *******************************************************************		System.out.println();		System.out.println();				// Part 3.  FINDING NEGATIVE POWERS OF 3.		// Write a while(true) loop that asks the user to enter a negative		// integer for the exponent of the base 3.  If the user enters 0		// or any positive integer, then the program will quit immediately		// without calculating or outputting anything.		// Use a printf statement to print the output to the screen with a		// field width of 4 for the integer exponent and a field width of		// 8 and a precision of 5 for the power.		// Here is the output for a sample run of the code segment:			/*			This part of the program allows the user to find			a power of 3 where the exponent is negative.						Enter a negative integer or any positive integer to quit -1						3 raised to the   -1 power is  0.33333						Enter a negative integer or any positive integer to quit -2						3 raised to the   -2 power is  0.11111						Enter a negative integer or any positive integer to quit -3						3 raised to the   -3 power is  0.03704						Enter a negative integer or any positive integer to quit -4						3 raised to the   -4 power is  0.01235		*/		Scanner reader = new Scanner(System.in);		System.out.println("This part of the program allows the user to find");		System.out.println("a power of 3 where the exponent is negative.");		System.out.println();		int power;				while(true)		{						System.out.println("Enter a negative integer or any positive integer to quit: ");			power = reader.nextInt();			System.out.println();						if (power<0)			{				double powerAns = Math.pow(3, power);				System.out.printf("3 raised to the %4d is %8.5f%n", power, powerAns);				System.out.println();			}						else if (power >= 0)				break;		}								// *******************************************************************//					System.out.println();		System.out.println();			// Part 4.  CONCATENATING SENTENCES TO FORM A PARAGRAPH		// Write a while loop that will run three times.  Each time the loop runs		// the user will enter one sentence.  Use the variable sentence for this.		// The loop should concatenate each sentence to a variable named paragraph.		// After the loop is over, print the value contained in paragraph.  Your		// output should be the same as what is seen below in the sample for the		// sentences entered.  DO NOT USE A PRINTF STATEMENT FOR THIS PART.		// Here is a sample run of the program for this code segment:			/*		Enter a short sentence and two blank spaces and then press return: We are the Bearcats!  		Enter a short sentence and two blank spaces and then press return: The Mighty Mighty Bearcats!  				Enter a short sentence and two blank spaces and then press return: Go KCD, beat Collegiate!!  				Your paragraph has been formed.		We are the Bearcats!  The Mighty Mighty Bearcats!  Go KCD, beat Collegiate!!  		*/				reader.nextLine();  // consume new line character from previous code segment		String paragraph = "";		String sentence = "";		int stringCntr = 3;				while (stringCntr >= 1 && stringCntr <= 3)		{			System.out.println("Enter a short sentence and two blank spaces and then press return: ");			sentence = reader.nextLine();			paragraph += sentence;						stringCntr--;					}		System.out.println();		System.out.println("Your paragraph has been formed.\n" + paragraph);						// *******************************************************************		System.out.println();		System.out.println("Program Terminated.");	}}