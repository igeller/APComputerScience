// FileName:  WhileLoopReview.java// Student:package ch05;import java.util.Scanner;public class WhileLoopReview{	public static void main(String [] args)	{			Scanner reader		= new Scanner(System.in);				/*		Part 1.  Write a while-true loop that will allow the user to calculate		a power of 5 as many times as he or she wants.  Use the prompt:		"Enter a positive number for the exponent or a negative number to quit: "		If the user enters a negative value the loop will quit immediately without		executing any other code.  Inside the loop, use a Math class method to		calculate the power of 5 then print out the number and information using		a printf statement.  Use a field width of 10 and a precision of 3 for		formatting the exponent and a field width of 20 with a precision of 3 for		formatting the power.		Here is a sample run of the program for this code segment:						Enter a number for the exponent or a negative number to quit: 5.2			5 raised to the exponent     5.200 is            4311.655			 Enter a number for the exponent or a negative number to quit: 2.0			5 raised to the exponent     2.000 is              25.000			 Enter a number for the exponent or a negative number to quit: 3.0			5 raised to the exponent     3.000 is             125.000			 Enter a number for the exponent or a negative number to quit: 4.5			5 raised to the exponent     4.500 is            1397.542			 Enter a number for the exponent or a negative number to quit: -2.3		 */		while (true)		{			System.out.println("Enter a positive umber for the exponent or a negative number to quit: ");			double expo = reader.nextDouble();						if (expo < 0)				break;			else			{				double ans = Math.pow(5, expo);				System.out.printf("5 raised to the exponent %10.3f is %20.3f%n", expo, ans);			}		}		// *******************************************************************		System.out.println();		System.out.println();						// Part 2.  Write the code for a count-up while loop that		// sums the integers from -300 to -201 inclusive.		// Print the sum of the integers only one time.		// No need to use a printf statement.		// Here is a sample run of the program for this code segment:			//		// The sum of the integers is -25050		int cntr = -300;		int sum = 0;				while (cntr <= -201)		{			sum += cntr;			cntr++;		}				System.out.println("The sum of the integers is " + sum);								// *******************************************************************				System.out.println();		System.out.println();				/*		Part 3.  Write a count-down while loop that will print all of the square roots		of the integers from 20 down to 0 inclusive.  No need to use a printf statement.		Here is a sample run of the program for this code segment:						The square root of 20 is: 4.47213595499958			The square root of 19 is: 4.358898943540674			The square root of 18 is: 4.242640687119285			The square root of 17 is: 4.123105625617661			The square root of 16 is: 4.0			The square root of 15 is: 3.872983346207417			The square root of 14 is: 3.7416573867739413			The square root of 13 is: 3.605551275463989			The square root of 12 is: 3.4641016151377544			The square root of 11 is: 3.3166247903554			The square root of 10 is: 3.1622776601683795			The square root of 9 is: 3.0			The square root of 8 is: 2.8284271247461903			The square root of 7 is: 2.6457513110645907			The square root of 6 is: 2.449489742783178			The square root of 5 is: 2.23606797749979			The square root of 4 is: 2.0			The square root of 3 is: 1.7320508075688772			The square root of 2 is: 1.4142135623730951			The square root of 1 is: 1.0			The square root of 0 is: 0.0		 */		int base = 20;				while (base >= 0)		{			double sqrt = Math.sqrt(base);			System.out.println("The square root of " + base + " is: " + sqrt);			base--;		}						// *******************************************************************				System.out.println();		System.out.println("Program Terminated.");	}}