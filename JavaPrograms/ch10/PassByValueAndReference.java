package ch10;public class PassByValueAndReference {		public static void main(String [ ]  args)	{		// Part 1.				// Primitive values like ints are PASSED BY VALUE.  That means that		// a copy of the int is being made and passed to the method through		// the actual parameter a.  The actual parameter cannot be changed by		// the method. The method receives a copy of a in the formal parameter,		// which may have some other name.  If the method changes the formal		// parameter, the actual parameter will NOT be changed.  This is seen by		// by printing the value in the method.		int a = 10;		System.out.println("The value of a before the call of changeAMethod1 is " + a);		System.out.println();				changeAMethod1(a);				System.out.println();		System.out.println("The value of a after the call of method changeAMethod1 is " + a);		System.out.println();	System.out.println();				System.out.println("The value of a before the call of changeAMethod2 is " + a);		System.out.println();				a = changeAMethod2(a);				System.out.println();		System.out.println("The value of a after the call of method changeAMethod2 is " + a);		System.out.println();	System.out.println();				// ****************************************************************				// Part 2.				// Strings are immutable, so even though a String is an object not a 		// primitive, if it is passed to a method by reference, any changes		// to the String made by the method will not be retained once the method		// is over. This is seen by the following call to the method changeXMethod1.		// However, if the method returns a value we can change a as you will see.		// Suppose you have the following String variable and initialization.		String x = "KCD";				System.out.println("Before the void method changeXMethod1, the value of x is " + x);				System.out.println();				changeXMethod1(x);  // void method call where x is passed to the method.				System.out.println();				System.out.println("After the void method changeXMethod1, the value of x is " + x);				// The println statement above will print KCD no matter what the method		// does to x.  Scroll down after the main method to see changeXMethod1.				System.out.println();	System.out.println();		// However, we can change what a String variable points at by using an		// assignment statement with the original String variable.  This points		// the variable away from the original String object and at a new one		// which is here returned by changeXMethod2.  Scroll down to see the method.		System.out.println("Before the method changeXMethod2, the value of x is " + x);		System.out.println();				x = changeXMethod2(x);				System.out.println();				System.out.println("After the method changeXMethod2, the value of x is " + x);		System.out.println();	System.out.println();				int [] tests = new int[3];		tests[0] = 90;		tests[1] = 80;		tests[2] = 70;				Student student = new Student("Bill", tests);				System.out.println(student);				addFiveToFirstTest(student);				System.out.println();				System.out.println(student);				System.out.println();			} // end of main method	// The formal parameter b receives a copy of the actual parameter a's value.	// This copy can be changed in the method, but the original actual parameter	// will not be changed.	public static void changeAMethod1(int b)	{		b = b -1;		System.out.println("The value of b in the method after decrementing by 1 is " + b);	}		// To make the change permanent to a, we must return the changed value of b.	public static int changeAMethod2(int b)	{		b = b -1;		System.out.println("The value of b in the method after decrementing by 1 is " + b);		return b;	}		// *******************************************************************************		// What happens as this method is called, is a copy of the reference to the	// String object that points at "KCD" is passed to the method.  However, we	// immediately point the String variable y (an alias of variable x) away	// from the String object KCD at a new String object given the value "Bearcats".	// Java automatically points it away from "KCD" to "Bearcats" because String	// objects are immutable.  If we print y inside the method, "Bearcats" will	// be displayed.  Again, we are assigning the alias variable a new object to	// point at and x still points at "KCD".	public static void changeXMethod1(String y)	{		y = "Bearcats";		System.out.println("The value of y inside of changeXMethod1 is " + y);	}	// Again, y is an alias of x that is pointed at "KCD", and just as we said	// above .... y is pointed away from "KCD" to a new String object "Bearcats".	// Because the alias is returned (formally stated as a reference to the alias"	// A pointer to this new String object is passed back to the main method.	// When it gets there we point x away from "KCD" and point it at what y is	// pointing at.	public static String changeXMethod2(String y)	{		y = "Bearcats";		System.out.println("The value of y inside of changeXMethod2 is " + y);		return y;	}		public static void addFiveToFirstTest(Student student)	{		int test = student.getScore(1);		student.setScore(1, test + 5);	}}