// FileName:  Person2Driver.java// Driver File - Client file that uses Person2 Objects.package ch08;import java.util.Scanner;public class Person2Driver{	public static void main (String[] args)	{		Scanner reader = new Scanner(System.in);		// Declare person1 as an Person variable and call the DEFAULT CONSTRUCTOR		// to instantiate a new Person object for it to refer to.		Person2 person1= new Person2();		// call the toString() method explicity inside a System.out.println statement		// to print the state of the object person1 with its default values.		System.out.println("Here is the info on Person #1: " + "\n" + person1.toString());		// NOW YOU ARE GOING TO CALL THE MUTATOR METHODS OF THE PERSON CLASS!		// call the appropriate mutator method and set the name of person1 to "Mary".		person1.setName("Mary");		// call the appropriate mutator method and set the age of person1 to 17.		person1.setAge(17);		// call the appropriate mutator method and set the address of person1 to "123 Water St.".		person1.setAddress("123 Water St.");		// call the appropriate mutator method and set the phone number of person1 to "502-423-0440".		person1.setPhone("502-423-0440");		// call the toString() method implicity inside a System.out.println statement to print		// the state of the object person1.		System.out.println("Here is the info on Person #1: " + "\n" +person1);		// STOP AND RUN THE PROGRAM BEFORE WRITING ANY MORE CODE!		// NOW YOU ARE GOING TO CONSTRUCT A SECOND PERSON IN A DIFFERENT WAY!		// Use these variables in coding the lines below!		String personsName;		int personsAge;		String personsAddress;		String personsPhone;		// Ask the user to enter the name of the person from the keyboard and store it		// in the variable personsName.  Use the prompt  "Enter the name of the person:  "		System.out.print("Enter the name of the person:  ");		personsName = reader.nextLine();				// Ask the user to enter the age of the person from the keyboard and store it		// in the variable personsAge.  Use the prompt  "Enter the age of the person:  "		// Do you need to consume the hanging new line character here? YES! So do that too.		System.out.print("Enter the age of the person:  ");		personsAge = reader.nextInt();				reader.nextLine(); // consume new line character		// Ask the user to enter the address of the person from the keyboard and store it		// in the variable personsAddress.  Use the prompt  "Enter the address of the person:  "		System.out.print("Enter the address of the person:  ");		personsAddress = reader.nextLine();		// Ask the user to enter the phone number of the person from the keyboard and store it		// in the variable personsPhone.  Use the prompt  "Enter the phone number of the person:  "		System.out.print("Enter the phone number of the person:  ");		personsPhone = reader.nextLine();		// THIS IS WHERE YOU ARE GOING TO MESS UP IF YOU DON'T READ THE NEXT INSTRUCTIONS CAREFULLY!!!		// Declare person2 as an Person variable and call the INITIALIZING CONSTRUCTOR		// to instantiate a new Person object for it to refer to and pass it the values		// stored in the variables above.		Person2 person2 = new Person2(personsName, personsAge, personsAddress, personsPhone);		// call the toString() method explicity inside a System.out.println statement to print		// the state of the object person2.		System.out.println ("Here is the info on Person #2: " + "\n" + person2.toString());		// NOW YOU ARE GOING TO REUSE THE ABOVE VARIABLES TO STORE VALUES RETURNED BY THE		// ACCESSOR METHODS OF THE PERSON CLASS!!!		// call the appropriate accessor method to obtain the name of person2 and		// assign it to the variable personsName.		personsName = person2.getName();		// use a println statement to output just the name of person2 to the screen using		// "The name of Person #2 is : "		System.out.println ("The name of Person #2 is : " + personsName);		// call the appropriate accessor method to obtain the age of person2 and assign		// it to the variable personsAge.		personsAge = person2.getAge();		// use a println statement to output just the age of person2 to the screen using		// "The age of Person #2 is : "		System.out.println ("The age of Person #2 is : " + personsAge);		// call the appropriate accessor method to obtain the address of person2 and assign		// it to the variable personsAddress.		personsAddress = person2.getAddress();		// use a println statement to output just the address of person2 to the screen using		// "The address of Person #2 is : "		System.out.println ("The address of Person #2 is : "+ personsAddress);		// call the appropriate accessor method to obtain the phone number of person2 and assign		// it to the variable personsPhone.		personsPhone = person2.getPhone();		// use a println statement to output just the phone number of person2 to the screen using		// "The phone number of Person #2 is : "		System.out.println ("The phone number of Person #2 is : "+ personsPhone);		System.out.println();			// STOP AND RUN THE PROGRAM BEFORE WRITING ANY MORE CODE!		// Declare person3 as an Person variable and call the copy constructor and make		// a copy of person1 for person3 to refer to.		Person2 person3 = new Person2 (person1);		// call the toString() method implicity in 1 line of code (as shown you previously) to 		// display to the screen the state of the instance variables of the object referred to by person3.		System.out.println ("Here is the info on Person #3: " +  "\n" + person3);			} // end of main	} // end of class Person2Driver