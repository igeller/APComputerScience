// FileName:  JavaCarRace.java			Applet Driver// Finish the segments of code associated with the inline instructions. // Here are general instructions:// 	After finishing the Car class, then just start at the top of this file in // 	the init() method and follow the inline instructions on what to write.// 	Notice much of the code for this file is done.  I want you to finish the// 	more interesting parts.  So after init() proceed to drawFrame() and// 	after that you will finish paintDragStrip().// 	You should stop and run the program at this point, but you won't see// 	any cars yet.  After that you will activate the drawCar() method and// 	finish the code in that method.// The applet program window is 900 pixels wide and 600 high.import java.awt.*;import java.applet.AudioClip;import javax.swing.JOptionPane;public class JavaCarRace extends SimpleAnimation {	private static final long serialVersionUID = 1L;	// THIS IS NOT A MODEL CLASS BUT WE WILL HAVE GLOBAL VARIABLES.	// NO NEED TO MAKE THEM PRIVATE.  NO OTHER CLASS WILL USE THIS FILE.	AudioClip carstart, tiressqueal;	int frames;	int spokes;	int speed1, speed2, speed3, speed4, speed5, speed6;	Car car1, car2, car3, car4, car5, car6;	public void init()	{		resize(900, 600);		setMillisecondsPerFrame(30);		frames = 0;		spokes = 0;		tiressqueal = getAudioClip(getCodeBase(), "sounds/tiressqueal.wav");		carstart = getAudioClip(getCodeBase(), "sounds/carstart.wav");				// NOTE:  car1 and car2 are declared above globally.  DO NOT REDECLARE THEM!!!		// Construct cars using the initializing constructor as follows:		// new Car(horizontalPos, verticalPos, cabin color, body color, wheel color, name, speed)		// Give car1 a horizontal position of 100, a vertical position of 50, 3 colors, ....		// 				the name Car1, and speed of 0.				/*int horizontalPos = 100;				int verticalPos = 50;				Color cabinColor = Color.cyan;				Color bodyColor = Color.magenta;				Color wheelColor = Color.green;				String name = "Car1"; 				int speed = 0;				car1 = new Car(horizontalPos, verticalPos, cabinColor, bodyColor, wheelColor, name, speed);*/		String carName1 = JOptionPane.showInputDialog ("Enter The car name", "Car1");		car1 = new Car(100, 50, Color.cyan, Color.magenta, Color.green, carName1, 0);						// Give car2 a horizontal position of 100, a vertical position of 150, 3 colors, ....		// 				the name Car2, and speed of 0.						/*horizontalPos = 100;				verticalPos = 150;				cabinColor = Color.orange;				bodyColor = Color.yellow;				wheelColor = Color.pink;				name = "Car2"; 				speed = 0;				car2 = new Car(horizontalPos, verticalPos, cabinColor, bodyColor, wheelColor, name, speed);*/		String carName2 = JOptionPane.showInputDialog ("Enter The car name", "Car2");		car2 = new Car(100, 150, Color.orange, Color.yellow, Color.pink, carName2, 0);				String carName3 = JOptionPane.showInputDialog ("Enter The car name", "Car3");		car3 = new Car (100, 250, Color.green, Color.cyan, Color.yellow, carName3, 0);				String carName4 = JOptionPane.showInputDialog ("Enter The car name", "Car4");		car4 = new Car (100, 350, Color.pink, Color.white, Color.blue, carName4, 0);				String carName5 = JOptionPane.showInputDialog ("Enter The car name", "Car5");		car5 = new Car (100, 450, Color.yellow, Color.green, Color.blue, carName5, 0);				String carName6 = JOptionPane.showInputDialog ("Enter The car name", "Car6");		car6 = new Car (100, 550, Color.magenta, Color.orange, Color.red, carName6, 0);				// AFTER WRITING THE CODE ABOVE TO CONSTRUCT THE TWO CARS, THEN ACTIVATE THE FOLLOWING		// CODE AND THEN RUN THE PROGRAM TO SEE THE STATE OF EACH CAR THAT WAS CONSTRUCTED.		System.out.println("car 1: \n" + car1);		System.out.println("car 2: \n" + car2);		System.out.println("car 3: \n" + car3);		System.out.println("car 4: \n" + car4);		System.out.println("car 5: \n" + car5);		System.out.println("car 6: \n" + car6);				// play the car start sound		carstart.play();	}				public void drawFrame(Graphics g)	{			// Call the paintDragStrip method here		PaintDragStrip(g);				// Write the code to generate a new random speed for each car every 100 frames.		// The global variables speed1 & speed2 should get the new speed.		// After storing the new speeds, then call the correct mutator method of the Car		// class to set the speed of each car for car1 & car2.		if (frames % 100 == 0)		{			speed1 = (int)(Math.random()*5 + 1);			speed2 = (int)(Math.random()*5 + 1);			speed3 = (int)(Math.random()*5 + 1);			speed4 = (int)(Math.random()*5 + 1);			speed5 = (int)(Math.random()*5 + 1);			speed6 = (int)(Math.random()*5 + 1);						car1.setSpeed(speed1);			car2.setSpeed(speed2);			car3.setSpeed(speed3);			car4.setSpeed(speed4);			car5.setSpeed(speed5);			car6.setSpeed(speed6);		}				// Write the code to play the tiressqueal audio file when frames is equal to 51.		if (frames == 51)			tiressqueal.play();						// AFTER WRITING THE drawCar METHOD, CALL THAT METHOD FOR EACH CAR.		drawCar(g, car1);		drawCar(g, car2);		drawCar(g, car3);		drawCar(g, car4);		drawCar(g, car5);		drawCar(g, car6);								// DO NOT DELETE OR CHANGE THE FOLLOWING TWO LINES OF CODE.		frames++;			spokes++;	// increment spokes so the spokes seem to turn when drawCar() is called.	}	public void PaintDragStrip(Graphics g)	{		// Paint the entire 900 x 600 applet window gray.  This is the code that will erase		// the entire applet so everything can be repainted - erasing the previous images.		// DO NOT CALL SETBACKGROUND TO DO THIS - USE FILLRECT.		g.setColor(Color.gray);		g.fillRect(0, 0, 900, 600);		// WRITE A NESTED LOOP that will paint the five dashed red lane dividers of the track.		// Each lane divider is actually two lines right next to each other so it appears thicker.		// There are 9 segments, each 50 pixels long, in each set of lane dividers.		// Each 50 pixel segment will be centered within its 100 pixel segment.		// Use loop control variables h and v for your two loops.  There is more than one way		// to write the code for the two loops, but you only need two drawLine statements in the		// inner loop.  The second drawLine call will be 1 pixel lower than the first one.		for(int h = 25; h <= 825 ; h+=100)		{						for (int v = 100; v <= 500; v += 100)			{				g.setColor(Color.red);				g.drawLine(h, v, h+50, v);				g.drawLine(h, v+1, h+50, v+1);			}		}				// DO NOT EREASE THE FOLLOWING CODE		// Paint the grassy edge of the drag strip.		g.setColor(Color.green);		g.fillRect(0, 0, 900, 10);		g.fillRect(0, 590, 900, 10);	}		// ACTIVATE THE FOLLOWING METHOD ONLY AFTER FINISHING ALL OF THE ABOVE CODE!!	public void drawCar(Graphics g, Car car)	{			int h;		// temporarily holds the horizontal position of the car		int v;		// temporarily holds the vertical position of the car		Color b;		// temporarily holds the color of the body of the car			Color c;		// temporarily holds the color of the cabin of the car			Color w;		// temporarily holds the color of the wheels of the car			// The following if statement will only be executed after frames reaches 51.  This		// keeps the cars from moving the first 50 frames allowing the carstart sound to play.		if(frames > 50)  // DO NOT ERASE OR MODIFY THIS LINE		{						// Get the current horizontal position of the car and assign it to local			// variable h so we can then change the horizontal value.			h = car.getH();							// Now, reset the horizontal position of the car based on its speed!			// Here is how we will handle this:			// If the speed of the car is 1, then we will increment its horizontal position by 1.			// Else if the speed of the car is 2, then we will increment its horizontal position by 3.			// Else if the speed of the car is 3, then we will increment its horizontal position by 5.			// So get the speed of the car and see if it is 1, 2, 3, 4, or 5 and then call the mutator			// method of the Car class that changes the horizontal position by the appropriate amount.			if (car.getSpeed() == 1)				car.setH(h+1);			else if (car.getSpeed() == 2)				car.setH(h+3);			else if (car.getSpeed() == 3)				car.setH(h+5);			else if (car.getSpeed() == 4)				car.setH(h+7);			else if (car.getSpeed() == 5)				car.setH(h+9);		} // end if frames > 50   // DO NOT ERASE OR MODIFY THIS LINE		// Now that the horizontal position of the car has been changed, get the horizontal position		// back out of the car and store it in h so we can use h.  Also, get the vertical position		// of the car and store it in v.  We will use h and v when drawing the car.		h = car.getH();							// Get the vertical position of the car and assign it to local variable v.		v = car.getV();		// We need to know the colors of the different parts of the car, so call the accessor		// methods of the Car class and store them in the local variables b, c, w.  Store the body		// color in b.  Store the cabin color in c.  And store the wheel color in w.		b = car.getBodyColor();		c = car.getCabinColor();		w = car.getWheelsColor();								// Set the points for the outline of the cabin		int n = 4;		int x [] = {h-35, h-25, h+15, h+40};		int y [] = {v-15, v-35, v-35, v-15};				// Set the graphics painting color for the body of the car		g.setColor(b);		g.fillOval(h-50, v-20, 100, 30);			// paint the body		g.setColor(Color.black);						// outline color		g.drawOval(h-50, v-20, 100, 30);		// draw the outline				// Set the graphics painting color for the cabin of the car		g.setColor(c);		g.fillPolygon(x, y, n);					// paint the cabin		g.setColor(Color.black);		g.drawPolygon(x, y, n);					// paint outline of cabin		g.drawLine(h+15, v-35, h+15, v-15);		// draw right vertical window line		g.drawLine(h-25, v-35, h-25, v-15);		// draw left vertical window line		g.drawLine(h-5, v-35, h-5, v-15);		// draw middle vertical window line		// Set the graphics painting color for the wheels of the car		g.setColor(w);		g.fillOval(h-45, v+5, 20, 20);				// paint the left wheel		g.fillOval(h+25, v+5, 20, 20);			// paint the right wheel		g.setColor(Color.black);		g.drawOval(h-45, v+5, 20, 20);			// draw outline of left wheel			g.drawOval(h+25, v+5, 20, 20);			// draw outline of right wheel		// Set the graphics painting color for the spokes of the wheels		g.setColor(Color.black);		// If the value of spokes is even, then the spokes will be painted as a +.		// If the value of spokes is odd, then the spokes will be painted as an x.		if (spokes % 2 == 0)							// make spokes turn		{			g.drawLine(h-43, v+15, h-27, v+15);		// left wheel spoke horizontal			g.drawLine(h-35, v+7, h-35, v+23);		// left wheel spoke vertical			g.drawLine(h+27, v+15, h+43, v+15);	// right wheel spoke horizontal			g.drawLine(h+35, v+7, h+35, v+23);		// right wheel spoke vertical		}		else		{			g.drawLine(h-41, v+21, h-29, v+9);		// left wheel spoke diagonal up			g.drawLine(h-41, v+9, h-29, v+21);		// left wheel spoke diagonal down			g.drawLine(h+29, v+21, h+41, v+9);		// right wheel spoke diagonal up			g.drawLine(h+29, v+9, h+41, v+21);		// right wheel spoke diagonal down		}		// Set the graphics paintng color for the name of the car		g.setColor(Color.black);		Font myFont = new Font ("Times", Font.BOLD, 16);			 		g.setFont(myFont);				// ACTIVATE THE FOLLOWING g.drawString code below and replace ??? with the correct		// call to the accessor method to get the name of the car.		g.drawString(car.getName(), h-30, v);		 	} //DO NOT ERASE THIS CURLY BRACE	} // end JavaCar Applet Driver (DO NOT ERASE THIS CURLY BRACE)