// Calculator Applet Program// Name:  Mr. Conreyimport java.awt.BorderLayout;import java.awt.Container;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JApplet;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;public class Calculator extends JApplet implements ActionListener{	private static final long serialVersionUID = 1L;	// Step 1. Instantiating the variables.	// Instantiate the declared labels, fields, buttons, and text area	// for this program based on the web applet key example.	// Use the wording for the labels and buttons you see.	JLabel opLbl1 = new JLabel("     Operand 1", JLabel.RIGHT);	JLabel opLbl2 = new JLabel("     Operand 2", JLabel.RIGHT);	JTextField opFld1 = new JTextField("", 20);	JTextField opFld2 = new JTextField("", 20);	JTextArea output = new JTextArea(20, 75);	// 20 rows and 75 columns	JButton addBtn = new JButton("+");	JButton subBtn = new JButton("-");	JButton multBtn = new JButton("*");	JButton divBtn = new JButton("/");	JButton clearBtn = new JButton("Clear");	String heading = String.format("%53s%n", "Welcome to the GUI Calculator\n");	/*	Step 2.  Completing the init() method.	This applet program uses a BorderLayout, where the items 	in each region will be a panel.  Here are the panels and their names	and the order the components should be added to the panels:		dataPanel contains opLbl1, opFld1, opLbl2, & opFld2		Note:  dataPanel is a 1 x 4 GridLayout  ... use a horizontal gap of					between 5 and 10, but  a vertical gap of just 1.		dataPanel will be added to the NORTH region.				textPanel contains output wrapped in a JScrollPane ...			textPanel.add(new JScrollPane (output));		textPanel will be added to the CENTER region.				buttonPanel contains addBtn, subBtn, multBtn, divBtn, and clearBtn		Note:  buttonPanel is a 1 x 5 GridLayout ... use			use a horizontal gap of between 5 and 10, but  a vertical gap of just 1.		buttonPanel will be added to the SOUTH region.	Instantiate the Container variable container and call getContentPane().	Set the container's layout is automatically set to the default BorderLayout.	Add the panels to the container.  Don't change the resize (650, 350)	line as the GUI will not display right upon loading.	Set the text of the JTextArea output to the value 	contained in the variable heading.	Make the text area uneditable using the line:		output.setEditable(false);   // Note: setEnabled grays out the output	Request the focus to be op1Fld by using the line:		opFld1.requestFocus();	 */	public void init() 	{			resize(650, 350);		Font myFont = new Font ("Courier", Font.PLAIN, 14);				opLbl1.setFont(myFont);		opLbl2.setFont(myFont);		opFld1.setFont(myFont);		opFld2.setFont(myFont);		addBtn.setFont(myFont);		subBtn.setFont(myFont);		multBtn.setFont(myFont);		divBtn.setFont(myFont);		clearBtn.setFont(myFont);		output.setFont(myFont);		JPanel dataPanel = new JPanel(new GridLayout(1, 4, 50, 1));		dataPanel.add(opLbl1);		dataPanel.add(opFld1);		dataPanel.add(opLbl2);		dataPanel.add(opFld2);		//JPanel buttonPanel = new JPanel(new GridLayout(1, 5, 6, 1));		JPanel buttonPanel = new JPanel(new GridLayout(1, 5, 50, 10));		buttonPanel.add(addBtn);		buttonPanel.add(subBtn);		buttonPanel.add(multBtn);		buttonPanel.add(divBtn);		buttonPanel.add(clearBtn);		JPanel textPanel = new JPanel();		JScrollPane myJScrollPane = new JScrollPane(output);		// Allow the mouse wheel to scroll inside the text area		myJScrollPane.setWheelScrollingEnabled(true);		textPanel.add(myJScrollPane);		Container container = getContentPane();				container.add(dataPanel, BorderLayout.NORTH);		container.add(buttonPanel, BorderLayout.SOUTH);		container.add(textPanel, BorderLayout.CENTER);		output.setText(heading);		output.setEditable(false);		opFld1.requestFocus();		addBtn.addActionListener(this);		subBtn.addActionListener(this);		multBtn.addActionListener(this);		divBtn.addActionListener(this);		clearBtn.addActionListener(this);	}	/*		Process the values entered into the operand fields in the		try clause of a try-catch statement.  If the input is not valid,		then the program should show a "Bad Number Format" error 		message in a showMessageDialog window.		Next, complete the extended-if statement to process the appropriate		button click.  There are no private inner classes in this program,		because we have a lot of buttons.  We can simplify the button		processing task by checking for the source of the button.		In each branch of the extended-if, output one of the following		messages along with the result of the arithmetic operation:			"The sum of the two operands is " ...			"The difference of the two operands is " ...			"The product of the two operands is " ...			"The quotient of the two operands is " ...		Output a showMessageDialog window error message with			"You cannot divide by zero!" if operand 2 is 0.		If the clear button is clicked, the following should take place in the GUI:				Erase everything in op1Fld.				Erase everything in op2Fld.				Reset the focus to op1Fld .	 */	public void actionPerformed(ActionEvent e)	{			String input, s;		double op1 = 1, op2=1;		if (e.getSource() == clearBtn)		{			output.setText(heading);			opFld1.setText("");			opFld2.setText("");			opFld1.requestFocus();			return;		}		try{			input = opFld1.getText();			op1 = Double.parseDouble(input);			input = opFld2.getText();			op2 = Double.parseDouble(input);		}		catch(Exception ex)		{			JOptionPane.showMessageDialog(Calculator.this, "Bad number format", 					"Calculator", JOptionPane.ERROR_MESSAGE);			// reset everything except text area			opFld1.setText("");			opFld2.setText("");			opFld1.requestFocus();			return;		// exit the method		}		if (e.getSource() == addBtn)		{				s = String.format("%-40s%,30.10f%n", "The sum of the two operands is", op1 + op2);			output.append(s);		}		else if (e.getSource() == subBtn)		{			s = String.format("%-40s%,30.10f%n", "The difference of the two operands is" , op1 - op2);			output.append(s);		}				else if (e.getSource() == multBtn)		{			s = String.format("%-40s%,30.10f%n", "The product of the two operands is" , op1 * op2);			output.append(s);		}		else if (e.getSource() == divBtn)		{			if (op2 != 0)			{				s = String.format("%-40s%,30.10f%n", "The quotient of the two operands is" , op1 / op2);				output.append(s);			}			else			{				JOptionPane.showMessageDialog(Calculator.this, "You cannot divide by zero!", 						"Calculator", JOptionPane.ERROR_MESSAGE);				return;			}		}		opFld1.requestFocus();	} // end actionPerformed} // end Calculator