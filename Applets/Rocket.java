// FileName:  Rocket.java// Author:import java.applet.AudioClip;import java.awt.Color;import java.awt.Font;import java.awt.Graphics;public class Rocket extends SimpleAnimation {	private static final long serialVersionUID = 1L;	// Global variables available anywhere in this file without passing them.	int frames;			// tracks what frame (still picture) the animation sequence is on. 	int v;				// used to modify the vertical position of the rocket and fire.	int sunH;			// used to modify the horizontal position of the sun.	int sunV;			// used to modify the vertical position of the sun.	int moonH;	int moonV;	int cloudsH1;		// used to modify the horizontal position of the left clouds.	int cloudsH2;		// used to modify the horizontal position of the right clouds.	int green;			// used to modify the green color aspect of the sky.	int blue;			// used to modify the blue color aspect of the sky.	int launchArmH;		// used to modify the horizontal position of the launch arm.	int launchArmV;	int launchArmVT;	int count;			// contains the value that will be displayed on the clock.	public final Color BROWN = new Color(164, 84, 30);  // defines the color brown.	Color skyColor;   	// this variable will hold the current Color value of the sky.	AudioClip launch; 	// variable that refers to the rocketLaunch.wav sound.	int bikeH;	int bikeV;	int sum;	int spaceShipH;	int spaceShipDoorH;	int spaceShipDoorV;	int etParentH; 		//et parent at ship horizontal	int etH;	int etV;	int spaceShipDoorLightV;	int spaceShipHideThemH;	int skyCover; 	//int xPlaceForHideThem;	AudioClip etSpeaking; // ET Phone home	Color basketColor = new Color(247, 247, 206);	Color moonColor = new Color(255, 255, 204);	Color etColor = new Color (144, 144, 67); 	Color etOutlineColor = new Color (101, 101, 45);	Color etEyes = new Color (65, 137, 209);	Color spaceShipColor = new Color (128, 128, 128);	Color brown = new Color (139, 69, 19);	Color skinColorElliot = new Color(255, 243, 176); 	Color curbColor = new Color (195, 195, 195); 	Color curbshadowColor = new Color (160,160,160);	Color yellowLight = new Color (255, 255, 0, 100);	Color mtnColor = new Color(204, 153, 51); // mountain	Color moonColorClear = new Color (255, 255, 204, 150);	public void init() 	{		resize(950, 650);		// By using a speed of 33ms between frames, there will be approximately		// 30 frames in one second, because 1000 รท by 33 is approximately 30.		// Television video is based on 30 frames per second.		// This is a reasonable speed for this animation.  Once the init() method		// has finished loading the applet, then the drawFrame method will be call		// approximately every 1/30 of a second because of code in the SimpleAnimation class.		setMillisecondsPerFrame(33);		// Initially set the global variable frames to zero when the program runs.		frames = 0;		v = 0;			sunH = 0;			sunV = 0;		moonH = 0;		moonV = 0;		cloudsH1 = 0;		cloudsH2 = 0;		green = 255;			blue = 255;		launchArmH = 0;		launchArmV = 0;		count = 10;		launch = getAudioClip(getCodeBase(), "sounds/rocketLaunch.wav");		bikeH = 0;		bikeV = 0;		sum = 0;		spaceShipH = 1100;		spaceShipDoorH = 0;		spaceShipDoorV = 0;		etSpeaking = getAudioClip(getCodeBase(), "sounds/01 E.T. Phone Home - long with music.wav");		etParentH = 0;		etH = 0 ;		etV = 0;		spaceShipDoorLightV = 0;		spaceShipHideThemH = 0;		skyCover = 0;		//xPlaceForHideThem = spaceShipDoorLightV + 790;	}	public void drawFrame(Graphics g)	{		// Write an if-else statement that will execute the following:		//		1) if frames is less than or equal to 1000 then call the		//			method paintScene1 		//		2) otherwise if frames is greater than 1000 then call the		//			method paintScene2		//paintMoon (g);				if (frames<=1000)			paintScene1(g);		else if (frames > 1000 && frames <= 1800)			paintScene2(g);		else if (frames > 1800 && frames < 3300)			paintScene3(g);		else if(frames > 3300 && frames < 3600)			paintScene4(g);		else if(frames > 3600 && frames < 3900)			paintScene5(g);		else//if (frames > 3900)			paintScene6(g);				// Call the paintRocket method here		paintRocket(g);				frames++;  // DO NOT WRITE CODE THAT INCREMENTS frames ANYWHERE ELSE!		// TEMPORARY CODE USED TO DISPLAY THE VALUE OF frames in the upper-left		// hand corner.  This can be helpful when writing if conditions that use		// the variable frames.		//g.setColor(Color.red);		//g.drawString("" + frames, 20, 20);				// DEACTIVATE THE ABOVE drawString LINE OF CODE WHEN PROGRAM IS FINISHED.			}  // end drawFrame()		public void paintScene1 (Graphics g) 	{		// DO NOT WRITE ANY CODE BEFORE THIS!  WE WILL ALWAYS PAINT THE SKY FIRST!		// This code repaints the entire applet the Sky Color.  DO NOT ERASE THIS CODE!		skyColor = new Color(0, green, blue);		g.setColor(skyColor);		g.fillRect(0, 0, 950, 650);		// Write an if statement with a compound boolean expression that will animate 		// the sun by incrementing sunH and sunV if the value of frames is greater		// than 90 and less than 1000.  Also, inside this if statement, write the code		// for another if statement that decrements the values of the variables green		// and blue if the value of green is greater than 64 and frames contains an		// even value.				if (frames > 90 && frames < 1000)		{			sunH++;			sunV++;						if(green > 64 && frames%2 == 0)			{				green--;				if (green == 20)					green = 20;				blue--;				if (blue == 10)					blue = 10;			}		}						// paint the sun			g.setColor(Color.yellow);				// We will modify this line to animate the sun and you can change the location				// a little if you need to later.		g.fillOval(sunH + 500, sunV + 100, 100, 100);			//Moon		g.setColor(moonColor); 		g.fillOval(moonH, moonV + 400, 500, 500);				if (frames > 300 && frames < 1000)		{			moonH++;			moonV--;		}				// paint the ground and mountains		g.setColor(mtnColor);		int mtn1X [] = {0, 0, 100, 200, 325, 400, 500, 550, 640, 700, 750, 780, 800, 900, 950, 950};		int mtn1Y [] = {380, 200, 225, 175, 250, 280, 240, 210, 265, 230, 225, 225, 250, 175, 220, 380};		g.fillPolygon(mtn1X, mtn1Y, 16);		//Grass		g.setColor(Color.green); 		g.fillRect(0, 300, 950, 350);				//road		g.setColor(Color.GRAY); 		g.fillRect(0, 320, 950, 250);						//main part of road				//curb		g.setColor(curbColor);		g.fillRect(0, 315, 950, 6); 						//top of top curb		g.fillRect(0, 340, 950, 3); 						//bottom of top curb (light color)		g.fillRect(0, 545, 950, 25); 						//bottom curb		g.setColor(curbshadowColor);		g.fillRect(0, 320, 950, 20);		g.fillRect(0, 570, 950, 15);		g.setColor(Color.yellow); 							//road center lines		g.fillRect(0, 380, 950, 5);				// paint the left cloud bank		if (frames > 0 && frames < 500)			cloudsH1--;		Color cloudColor = new Color (194, 233, 245);		g.setColor(cloudColor);		g.fillOval(cloudsH1 + 0, 100, 300, 100);		g.fillOval(cloudsH1 + 150, 100, 300, 100);		g.fillOval(cloudsH1 + 125, 50, 200, 100);		// paint the right cloud bank		if (frames > 0 && frames < 500)			cloudsH2++;		g.setColor(cloudColor);		g.fillOval(cloudsH2 + 500, 50, 300, 75);		g.fillOval(cloudsH2 + 650, 50, 300, 75);		g.fillOval(cloudsH2 + 625, 25, 200, 75);		// CAR (nasa building)		g.setColor(Color.BLACK); 		int carblX [] = {485, 500, 580, 600, 800, 820, 920, 945};		int carblY [] = {500, 435, 430, 360, 360, 430, 435, 500};		g.fillPolygon(carblX, carblY, 8);					// black part of car				// car mid section (white)		g.setColor(Color.WHITE);		int carwhX [] = {580, 580, 600, 800, 820, 820};		int carwhY [] = {500, 430, 355, 355, 430, 500};		g.fillPolygon(carwhX, carwhY, 6);				//windows		g.setColor(Color.black); 		int carWinX1 [] = {590, 610, 690, 690};		int carWinY1 [] = {435, 370, 370, 435};		g.fillPolygon(carWinX1, carWinY1, 4); 				// back window		int carWinX2 [] = {710, 710, 790, 810};		int carWinY2 [] = {435, 370, 370, 435};		g.fillPolygon(carWinX2, carWinY2, 4);				// front window				//door		g.drawLine(700, 360, 700, 495); 					// doors middle line		g.drawLine(590, 495, 810, 495);						// horizontal top of door		g.drawLine(590, 495, 590, 435);						// back door vertical line		g.drawLine(810, 495, 810, 435);						// front door vertical line		g.drawLine(610, 360, 790, 360);						// door slant		g.fillRoundRect(600, 445, 30, 10, 30, 30); 			// back door handle		g.fillRoundRect(710, 445, 30, 10, 30, 30); 			// front door handle				//front wind shield		Color windShieldColor = new Color (117, 167, 172);		g.setColor(windShieldColor);		int carFrX [] = {816, 796, 802, 821};		int carFrY [] = {432, 360, 360, 432};		g.fillPolygon(carFrX, carFrY, 4);		g.setColor(Color.gray);		g.drawPolygon(carFrX, carFrY, 4);				//back wind shield		g.setColor(windShieldColor);		int carBkX [] = {579, 596, 603, 585};		int carBkY [] = {432, 370, 370, 432};		g.fillPolygon(carBkX, carBkY, 4);		g.setColor(Color.gray);		g.drawPolygon(carBkX, carBkY, 4);				// car back tire		g.setColor(Color.BLACK); 		g.fillOval(530, 480, 60, 60);		g.setColor(Color.gray);		g.drawOval(530, 480, 60, 60);		g.setColor(Color.WHITE);		g.fillOval(540, 490, 40, 40);		g.setColor(Color.BLACK);		g.fillOval(555, 505, 10, 10);		g.drawLine(560, 490, 560, 530);		g.drawLine(540, 510, 580, 510);		g.drawLine(545, 525, 575, 495);		g.drawLine(545, 495, 575, 525);				//car front tire		g.setColor(Color.BLACK); 		g.fillOval(810, 480, 60, 60);		g.setColor(Color.gray);		g.drawOval(810, 480, 60, 60);		g.setColor(Color.WHITE);		g.fillOval(820, 490, 40, 40);		g.setColor(Color.BLACK);		g.fillOval(835, 505, 10, 10);		g.drawLine(840, 490, 840, 530);		g.drawLine(820, 510, 860, 510);		g.drawLine(825, 525, 855, 495);		g.drawLine(825, 495, 855, 525);				// paint the blue NASA log with white letters on the building		g.setColor(Color.blue);		g.fillOval(745, 440, 50, 50);		g.setColor(Color.red);		g.drawLine(745, 470, 790, 450);		g.drawLine(760, 485, 790, 450);		g.setColor(Color.white);		g.drawString("NASA", 755, 470);		// paint the control tower	-- water tower		g.setColor(Color.white);		g.fillRect(110, 210, 10, 95);		g.fillRect(180, 210, 10, 95);		g.fillRect(145, 220, 10, 80);		g.setColor(Color.BLACK);		g.drawRect(110, 210, 10, 95);		g.drawRect(180, 210, 10, 95);		g.drawRect(145, 220, 10, 80);		g.setColor(Color.white);		g.fillOval(100, 150, 100, 75);		g.setColor(Color.black);		g.drawOval(100, 150, 100, 75);		g.setColor(Color.WHITE);		g.drawOval(110, 255, 75, 10);		g.drawLine(150, 140, 150, 150);		// Paint the count-down clock		g.setColor(Color.blue);		g.fillRoundRect(108, 167, 85, 40, 40, 30);		g.setColor(Color.black);		g.fillRoundRect(110, 170, 80, 35, 40, 30);		// ***************************************************************************			// SKIP THE FOLLOWING INSTRUCTION UNTIL YOU ARE CODING PHASE 3.		// Paint the animated numbers on the count-down clock.		// 	When count is greater than or equal to zero, do the following:		//		define myFont2 to be ("Times", Font.PLAIN, 36) by constructing		//    this font.  Then, set the drawing font to myFont2.  Set the 		//    drawing color to red.  Then, use an if-else statement in this		//    if statement to call drawString and paint the number on the 		//    count-down clock.  If the value in the variable count is 10,		//    paint the number 10 in the correct position on the clock.		//    If the value in the variable count is 0 - 9, then paint the		//    correct number at a slightly different position on the clock.		//    This is because it takes more space to paint a 10 than a 		//    single digit number.		Font myFont2 = new Font("Times New Roman", Font.PLAIN, 36);		g.setFont(myFont2);		g.setColor(Color.red);									if (count <= 10 && count >= 0)			{					if (count == 10)					g.drawString("" + count, 130, 200);				else if (count == 9)					g.drawString("" + count, 140, 200);				else if (count == 8)					g.drawString("" + count, 140, 200);					else if (count == 7)					g.drawString("" + count, 140, 200);				else if (count == 6)					g.drawString("" + count, 140, 200);				else if (count == 5)					g.drawString("" + count, 140, 200);				else if (count == 4)					g.drawString("" + count, 140, 200);				else if (count == 3)					g.drawString("" + count, 140, 200);				else if (count == 2)					g.drawString("" + count, 140, 200);				else if (count == 1)						g.drawString("" + count, 140, 200);				else if (count == 0)					g.drawString("GO", 125, 200);																				// Write an if statement that will decrement count by one ONLY WHEN		// THE FOLLOWING IS TRUE ... when (frames + 61) is evenly divisible by 30		// and when count is greater than 0.		// 				if (frames > 530 && frames < 580)					//flicker				{					if(frames % 10 ==0)						g.setColor(Color.black);						g.fillRoundRect(110, 170, 80, 35, 40, 30);				} 				if (frames > 590)				{						if((frames+61)%30 == 0)					count--;				}			}			else				g.drawString("GO", 125, 200);					// ***************************************************************************		// paint the launch pad with its base and vertical post.			g.setColor(Color.black);			g.fillRect(870, 350 - launchArmV, 2,  100 + launchArmV);			g.fillRect(870 - launchArmH, 350, 0 + launchArmH, 2);			g.fillOval(865, 350 - launchArmV, 10, 10);		// SKIP THE FOLLOWING INSTRUCTION UNTIL PHASE 1 IS COMPLETE AND		// EVERYTHING WORKS FINE, THEN WRITE THIS CODE DURING PHASE 2.		// Phase 2.  Paint the launch arm here by doing these two things:		// 1) Write an if statement with a compound boolean expression		//    whose code will execute if frames is greater than 33 and		//    frames is less than some other number.  You must figure out		//    the other number exactly or the launch arm will not stop in		//    the correct position and still be connected to the launch		//    pad vertical post.  The only line of code in the if is the		//    line:   launchArmH--;		// 2) After the if statement paint the launch arm.  Paint it using		//    fillRect with the correct 4 numbers, then build launchArmH		//    into your code.		if (frames > 100 && frames <300)		{			if (launchArmH <= 880 && launchArmV <= 360)			{				launchArmH++;				launchArmH++;				launchArmV++;			}					}				if (frames > 500 && frames < 600)		{			launchArmV--;			launchArmV--;		}		} // end of paintScene1 method - DO NOT ERASE THIS BRACE!!!		public void paintRocket (Graphics g)	{		//tires		g.setColor(Color.black); 		g.fillOval(bikeH + 20, bikeV + 460, 70, 70); //back		g.fillOval(bikeH + 220, bikeV + 460, 70, 70);//front				//tire middle		g.setColor(Color.gray);		g.fillOval(bikeH + 25, bikeV + 465, 60, 60); //back		g.fillOval(bikeH + 225, bikeV + 465, 60, 60); // front				//back tire spokes		g.setColor(Color.black);		g.drawLine(bikeH + 55, bikeV + 465, bikeH + 55, bikeV + 525);		g.drawLine(bikeH + 25, bikeV + 495, bikeH + 85, bikeV + 495);		g.drawLine(bikeH + 30, bikeV + 515, bikeH + 80, bikeV + 475);		g.drawLine(bikeH + 30, bikeV + 475, bikeH + 80, bikeV + 515);				//front tire spokes		g.drawLine(bikeH + 255, bikeV + 465, bikeH + 255, bikeV + 525);		g.drawLine(bikeH + 225, bikeV + 495, bikeH + 285, bikeV + 495);		g.drawLine(bikeH + 230, bikeV + 515, bikeH + 280, bikeV + 475);		g.drawLine(bikeH + 230, bikeV + 475, bikeH + 280, bikeV + 515);						//bike body		g.setColor(Color.red);		int backTireBottomBeamX [] = {bikeH + 55, bikeH + 135, bikeH + 135, bikeH + 55};		int backTireBottomBeamY [] = {bikeV + 495, bikeV + 490, bikeV + 495, bikeV + 500};		g.fillPolygon(backTireBottomBeamX, backTireBottomBeamY, 4);		int backTireTopBeamX [] = {bikeH + 55, bikeH + 55, bikeH + 130, bikeH + 130};		int backTireTopBeamY [] = {bikeV + 500, bikeV + 495, bikeV + 440, bikeV + 445 };		g.fillPolygon(backTireTopBeamX, backTireTopBeamY, 4);		int seatBeamX [] = {bikeH + 135, bikeH + 125, bikeH + 130, bikeH + 140};		int seatBeamY [] = {bikeV + 495, bikeV + 420, bikeV + 420, bikeV + 495};		g.fillPolygon(seatBeamX, seatBeamY, 4);				//left bike pedal		g.setColor(Color.black);		int leftPedalX [] = {bikeH + 135, bikeH + 184, bikeH + 184, bikeH + 135 };		int leftPedalY [] = {bikeV + 495, bikeV + 492, bikeV + 497, bikeV + 500};		g.fillPolygon(leftPedalX, leftPedalY, 4);		g.fillRect(bikeH + 184, bikeV + 492, 13, 6);				//elliott left leg (behind bike)		g.setColor(Color.blue);		int pantsLeftX [] = {bikeH + 155, bikeH + 185, bikeH + 185, bikeH + 200, bikeH + 200, bikeH + 170}; 		int pantsLeftY [] = {bikeV + 410, bikeV + 440, bikeV + 490, bikeV + 490, bikeV + 440, bikeV + 410};		g.fillPolygon(pantsLeftX, pantsLeftY, 6);				//left foot		g.setColor(brown);		g.fillRoundRect(bikeH + 184, bikeV + 480, 20, 12, 100, 10);				//bike body - front tire bottom bean		g.setColor(Color.red); 		int frontTireBottomBeamX [] = {bikeH + 140, bikeH + 140, bikeH + 240, bikeH + 240};		int frontTireBottomBeamY [] = {bikeV + 495, bikeV + 490, bikeV + 430, bikeV + 435};		g.fillPolygon(frontTireBottomBeamX, frontTireBottomBeamY, 4);				//bike body - front tire top beam		int frontTireTopBeamX [] = {bikeH + 130, bikeH + 130, bikeH + 235, bikeH + 235};		int frontTireTopBeamY [] = {bikeV + 445, bikeV + 440, bikeV + 410, bikeV + 415};		g.fillPolygon(frontTireTopBeamX, frontTireTopBeamY, 4);				//bike body - front tire center beam(the straight up and down one)		int frontTireCenterBeamX [] = {bikeH + 255, bikeH + 225, bikeH + 230, bikeH + 260};		int frontTireCenterBeamY [] = {bikeV + 495, bikeV + 380, bikeV + 380, bikeV + 495};		g.fillPolygon(frontTireCenterBeamX, frontTireCenterBeamY, 4);				//bike body - basket beam)		g.setColor(Color.WHITE);		int basketBeamX [] = {bikeH + 255, bikeH + 285, bikeH + 290, bikeH + 260};		int basketBeamY [] = {bikeV + 495, bikeV + 425, bikeV + 425, bikeV + 495};		g.fillPolygon(basketBeamX, basketBeamY, 4);				//eliott left arm		g.setColor(Color.red); 											g.fillRect(bikeH + 140, bikeV + 350, 80, 15); 							// elliot left arm		g.setColor(Color.BLACK);		g.drawRect(bikeH + 140, bikeV + 350, 80, 15);				//bike body - right handle bar		g.setColor(Color.black); 										int rHandleBarsX [] = {bikeH + 225, bikeH + 180, bikeH + 190, bikeH + 230};		int rHandleBarsY [] = {bikeV + 380, bikeV + 360, bikeV + 360, bikeV + 380};		g.fillPolygon(rHandleBarsX, rHandleBarsY, 4);							//bike body - left handle 		int lHandleBarsX [] = {bikeH + 225, bikeH + 230, bikeH + 235, bikeH + 230};		int lHandleBarsY [] = {bikeV + 380, bikeV + 360, bikeV + 360, bikeV + 380};		g.fillPolygon(lHandleBarsX, lHandleBarsY, 4);						//bike seat		g.setColor(Color.black); 										int bikeSeatX [] = {bikeH + 110, bikeH + 110, bikeH + 150, bikeH + 150, bikeH + 120}; 		int bikeSeatY [] ={bikeV + 415, bikeV + 420, bikeV + 420, bikeV + 415, bikeV + 405};		g.fillPolygon(bikeSeatX, bikeSeatY, 5);						//gear/ chain thing		g.setColor(Color.black); 		g.drawOval(bikeH + 125, bikeV + 480, 25, 25);							//right bike pedal		int rightPedalX [] = {bikeH + 135, bikeH + 159, bikeH + 159, bikeH + 135 };		int rightPedalY [] = {bikeV + 495, bikeV + 492, bikeV + 497, bikeV + 500};		g.fillPolygon(rightPedalX, rightPedalY, 4);		g.fillRect(bikeH + 159, bikeV + 492, 13, 6);				//eliott Rleg& butt		g.setColor(Color.BLUE);		int pantsRightX [] = {bikeH + 130, bikeH + 160, bikeH + 160, bikeH + 175, bikeH + 175, bikeH + 145};	// right leg		int pantsRightY [] = {bikeV + 410, bikeV + 440, bikeV + 490, bikeV + 490, bikeV + 440, bikeV + 410};		g.fillPolygon(pantsRightX, pantsRightY, 6);		g.fillRoundRect(bikeH + 125, bikeV + 390, 40, 30, 30, 90); 								//right foot		g.setColor(brown);		g.fillRoundRect(bikeH + 159, bikeV + 480, 20, 12, 100, 10);				//Elliot body (red sweatshirt)		g.setColor(Color.red);		g.fillOval(bikeH + 120, bikeV + 335, 40, 80);		g.fillRoundRect(bikeH + 130, bikeV + 335, 40, 80, 30, 30);			//eliott right arm & outline		g.setColor(Color.red);		g.fillRect(bikeH + 140, bikeV + 355, 40, 15); 									g.setColor(Color.black);		g.drawRect(bikeH + 140, bikeV + 355, 40, 15);				//elliot head		g.setColor(skinColorElliot);		g.fillOval(bikeH + 130, bikeV + 290, 40, 50);				//elliot nose		g.fillArc(bikeH + 155, bikeV + 315, 20, 25, 10, 60);				//elliott hair		for(double numLines = 150; numLines>=1; numLines--)		{			g.setColor(brown);			int x1EliottHair = (int) ((Math.random()) + 159);			int y1EliottHair = (int) ((Math.random()) + 293);			int x2EliottHair = (int) ((Math.random()*(20)) + 150);			int y2EliottHair = (int) ((Math.random()*(6))+ 300);			g.drawLine(bikeH + x1EliottHair, bikeV + y1EliottHair, bikeH + x2EliottHair, bikeV + y2EliottHair);		}		//g.fillArc(bikeH + 130, bikeV + 290, 40, 40, 0, 60);				//eliott hood		g.setColor(Color.red); 										g.fillArc(bikeH + 120, bikeV + 285, 60, 70, 270, -200);			//eliott eye		g.setColor(Color.white);		g.fillOval(bikeH + 155, bikeV + 310, 10, 10);		g.setColor(etEyes);		g.fillOval(bikeH + 159, bikeV + 311, 7, 7);		g.setColor(Color.black);		g.drawOval(bikeH + 155, bikeV + 310, 10, 10);				//eliott mouth		g.setColor(Color.pink);		g.fillOval(bikeH + 150, bikeV + 330, 15, 5);						// elliot Rhand		g.setColor(skinColorElliot);		g.fillOval(bikeH + 180, bikeV + 355, 15, 10);					// elliot Lhand		g.fillOval(bikeH + 220, bikeV + 350, 15, 10);											if (frames <= 2600)		{			//ET head			g.setColor(etColor);			g.fillOval(etH + 255, etV + 330, 55, 40);				g.setColor(etOutlineColor); 										g.drawOval(etH + 255, etV + 330, 55, 40);						//et hood			g.setColor(Color.white); 											g.fillArc(etH + 255, etV + 325, 60, 50, 270, -200);						//et eyes			g.fillOval(etH + 293, etV + 340, 12, 12);			g.setColor(etEyes);													g.fillOval(etH + 295, etV + 340, 9, 9);						//et mouth			g.setColor(etOutlineColor);										g.fillOval(etH + 300, etV + 355, 10, 5);													//et foot			g.setColor(etColor);			g.fillOval(etH + 260, etV + 410, 40, 10);			g.setColor(etOutlineColor);			g.drawOval(etH + 260, etV + 410, 40, 10);						//et body			g.setColor(etColor);			g.fillRoundRect(etH + 255, etV + 370, 40, 50, 30, 90);			g.setColor(etOutlineColor);			g.drawRoundRect(etH + 255, etV + 370, 40, 50, 30, 90);					//et arm			g.drawLine(etH + 275, etV + 380, etH + 275, etV + 400 );			g.drawLine(etH + 285, etV + 380, etH + 285, etV + 400 );						//et blanket for body			g.setColor(Color.white);			g.fillOval(etH + 255, etV + 365, 35, 50);		}					//basket		g.setColor(basketColor);		int basketX [] = {bikeH + 240, bikeH + 240, bikeH + 300, bikeH + 300};		int basketY [] = {bikeV + 425, bikeV + 375, bikeV + 375, bikeV + 425};		g.fillPolygon(basketX, basketY, 4);				//basket outline		g.setColor(Color.BLACK);																			g.drawPolygon(basketX, basketY, 4);										//basket lines		g.drawLine(bikeH + 240, bikeV + 375, bikeH + 300, bikeV + 425);			// center middle left upper		g.drawLine(bikeH + 240, bikeV + 400, bikeH + 270, bikeV + 425);			// short line below middle		g.drawLine(bikeH + 270, bikeV + 375, bikeH + 300, bikeV + 400);			// short line above middle		g.drawLine(bikeH + 300, bikeV + 375, bikeH + 240, bikeV + 425);			// center middle right upper 		g.drawLine(bikeH + 270, bikeV + 375, bikeH + 240, bikeV + 400);			// short line above middle 		g.drawLine(bikeH + 270, bikeV + 425, bikeH + 300, bikeV + 400);			// short line below middle				//back engine pipe		g.setColor(Color.white);		int engineBX [] = {bikeH + 70, bikeH + 70, bikeH + 10, bikeH + 10};		int engineBY [] = {bikeV + 485, bikeV + 500, bikeV + 525, bikeV + 510};		g.fillPolygon(engineBX, engineBY, 4);		g.setColor(Color.black);		g.drawPolygon(engineBX, engineBY, 4);				//front engine pipe		g.setColor(Color.white);		int engineFX [] = {bikeH + 255, bikeH + 250, bikeH + 195, bikeH + 195};		int engineFY [] = {bikeV + 495, bikeV + 480, bikeV + 510, bikeV + 525};		g.fillPolygon(engineFX, engineFY, 4);		g.setColor(Color.black);		g.drawPolygon(engineFX, engineFY, 4);											//fire and bike movement to top of car (not when fire starts at the end of countdown)		if (frames > 190 && frames < 400)		{			if (frames > 190 && frames < 390)			{				for(double numLines = 100/3; numLines>=1; numLines--)				{					//red BACK tire fire					g.setColor(Color.RED);					int x1RedB = 10;					int y1RedB = (int) ((Math.random()*(15)) + 510);					int x2RedB = (int) ((Math.random()*(5)) -20);					int y2RedB = (int) ((Math.random()*(35))+ 500);					g.drawLine(bikeH + x1RedB, bikeV + y1RedB, bikeH + x2RedB, bikeV + y2RedB);										//yellow BACK tire fire					g.setColor(Color.yellow);					int x1YellowB = 10;					int y1YellowB = (int) ((Math.random()*(15)) + 510);					int x2YellowB = (int) ((Math.random()*(5)) -20);					int y2YellowB = (int) ((Math.random()*(35))+ 500);					g.drawLine(bikeH + x1YellowB, bikeV + y1YellowB, bikeH + x2YellowB, bikeV + y2YellowB);										//orange BACK tire fire					g.setColor(Color.orange);					int x1OrangeB = 10;					int y1OrangeB = (int) ((Math.random()*(15)) + 510);					int x2OrangeB = (int) ((Math.random()*(5)) -20);					int y2OrangeB = (int) ((Math.random()*(35))+ 500);					g.drawLine(bikeH + x1OrangeB, bikeV + y1OrangeB, bikeH + x2OrangeB, bikeV + y2OrangeB);					//red FRONT tire fire					g.setColor(Color.RED);					int x1RedF = 195;					int y1RedF = (int) ((Math.random()*(15)) + 510);					int x2RedF = (int) ((Math.random()*(5)) + 165);					int y2RedF = (int) ((Math.random()*(35))+ 500);					g.drawLine(bikeH + x1RedF, bikeV + y1RedF, bikeH + x2RedF, bikeV + y2RedF);										//yellow FRONT tire fire					g.setColor(Color.yellow);					int x1YellowF = 195;					int y1YellowF = (int) ((Math.random()*(15)) + 510);					int x2YellowF = (int) ((Math.random()*(5)) +165);					int y2YellowF = (int) ((Math.random()*(35))+ 500);					g.drawLine(bikeH + x1YellowF, bikeV + y1YellowF, bikeH + x2YellowF, bikeV + y2YellowF);										//orange FRONT tire fire					g.setColor(Color.orange);					int x1Orange = 195;					int y1Orange = (int) ((Math.random()*(15)) + 510);					int x2Orange = (int) ((Math.random()*(5)) + 165);					int y2Orange = (int) ((Math.random()*(35))+ 500);					g.drawLine(bikeH + x1Orange, bikeV + y1Orange, bikeH + x2Orange, bikeV + y2Orange);						}			}			//bike movement (over to car)		 	if (frames > 200 && frames < 400)		 	{				if (bikeH <= 530 && bikeV <=290)				{					bikeH++;					bikeH++;					bikeH++;					bikeV--;					etH++;					etH++;					etH++;					etV--;									}		 	}			}										// ***************************************************************************		// PHASE 3 CODING:  Painting the fire coming out of the rocket.		// We want 100 lines of fire coming out of the rocket.		// 1/3 of the lines should be red, 1/3 orange, and 1/3 yellow.		// You must use a while loop to accomplish this.  However, we		// don't want the loop to run unless count is 3 or less.  The		// variable count starts at 10, so you need to do a test with		// the variable count to see if you will run the loop.		// WAIT UNTIL PHASE 3 TO WRITE THIS CODE!!!						if (count <=3)		{			for(double numLines = 100/3; numLines>=1; numLines--)			{				//red BACK tire fire				g.setColor(Color.RED);				int x1RedB = 10;				int y1RedB = (int) ((Math.random()*(15)) + 510);				int x2RedB = (int) ((Math.random()*(5)) -20);				int y2RedB = (int) ((Math.random()*(35))+ 500);				g.drawLine(bikeH + x1RedB, bikeV + y1RedB, bikeH + x2RedB, bikeV + y2RedB);								//yellow BACK tire fire				g.setColor(Color.yellow);				int x1YellowB = 10;				int y1YellowB = (int) ((Math.random()*(15)) + 510);				int x2YellowB = (int) ((Math.random()*(5)) -20);				int y2YellowB = (int) ((Math.random()*(35))+ 500);				g.drawLine(bikeH + x1YellowB, bikeV + y1YellowB, bikeH + x2YellowB, bikeV + y2YellowB);								//orange BACK tire fire				g.setColor(Color.orange);				int x1OrangeB = 10;				int y1OrangeB = (int) ((Math.random()*(15)) + 510);				int x2OrangeB = (int) ((Math.random()*(5)) -20);				int y2OrangeB = (int) ((Math.random()*(35))+ 500);				g.drawLine(bikeH + x1OrangeB, bikeV + y1OrangeB, bikeH + x2OrangeB, bikeV + y2OrangeB);							//red FRONT tire fire				g.setColor(Color.RED);				int x1RedF = 195;				int y1RedF = (int) ((Math.random()*(15)) + 510);				int x2RedF = (int) ((Math.random()*(5)) + 165);				int y2RedF = (int) ((Math.random()*(35))+ 500);				g.drawLine(bikeH + x1RedF, bikeV + y1RedF, bikeH + x2RedF, bikeV + y2RedF);								//yellow FRONT tire fire				g.setColor(Color.yellow);				int x1YellowF = 195;				int y1YellowF = (int) ((Math.random()*(15)) + 510);				int x2YellowF = (int) ((Math.random()*(5)) + 165);				int y2YellowF = (int) ((Math.random()*(35))+ 500);				g.drawLine(bikeH + x1YellowF, bikeV + y1YellowF, bikeH + x2YellowF, bikeV + y2YellowF);								//orange FRONT tire fire				g.setColor(Color.orange);				int x1Orange = 195;				int y1Orange = (int) ((Math.random()*(15)) + 510);				int x2Orange = (int) ((Math.random()*(5)) + 165);				int y2Orange = (int) ((Math.random()*(35))+ 500);				g.drawLine(bikeH + x1Orange, bikeV + y1Orange, bikeH + x2Orange, bikeV + y2Orange);			}					}				if (frames == 0)			etSpeaking.play();		// This code makes the rocket lift off after 12 seconds by varying		// the vertical position of the rocket by decrementing v.  For this		// code to work you must build v into your code that paints the rocket.		// This code assumes that there are 30 frames/sec.		if (frames > 900 && frames < 2150)  // 33 x 12 = 396 but 300 works better.		{				bikeH++;			bikeV--;			etH++;			etV--;		}				// code to play launch sound - ACTIVATE IN PHASE 3		if(frames == 580)			launch.play();		// reset v for rocket entering second scene		if (frames == 1001)		{			bikeV = 250;			bikeH = 0;			etV = 250;			etH = 0;		}				//resetrocket for phase 4		if (frames == 3300)			bikeV = -300;				//reset rocket for phase5		if (frames == 3601)				bikeV = -300;				//rest for phase 6		if (frames ==3900)			bikeV = 1000;			} // end of paintRocket method	public void paintScene2 (Graphics g) 	{		g.setColor(skyColor);		g.fillRect(0, 0, 950, 650);		// other code				//stars		g.setColor(Color.yellow);		int starX = (int) (Math.random()*950);		int starY = (int) (Math.random()*650);		g.drawLine(starX, starY, starX, starY + 20);		g.drawLine(starX - 10, starY + 10, starX + 10, starY + 10);				//Moon		g.setColor(moonColor); 			g.fillOval(moonH - 800, moonV + 1000, 500, 500);							if (frames > 1000 && frames < 1300)						{				moonH++;				moonV--;		}				//reset bike for the start of paintScene3						} // end of paintScene2			public void paintScene3 (Graphics g)	{		//sky color		g.setColor(skyColor);		g.fillRect(0, 0, 950, 650);				//stars		g.setColor(Color.yellow);		int starX = (int) (Math.random()*950);		int starY = (int) (Math.random()*650);		g.drawLine(starX, starY, starX, starY + 20);		g.drawLine(starX - 10, starY + 10, starX + 10, starY + 10);				//moon		g.setColor(moonColor);		g.fillOval(30, 20, 100, 100);				//bike in the sky		if (frames == 1801)		{			bikeV = 300;			bikeH = -300;			etV = 300;			etH = -300;		}					//spaceShip		g.setColor(spaceShipColor);		g.fillOval(spaceShipH, -100, 500, 750);		g.setColor(Color.yellow);						//triangle light top row ship		int shipUpLightsX [] = {spaceShipH + 35, spaceShipH + 50, spaceShipH + 65};		int shipUpLightsY [] = {115, 70, 115};		g.fillPolygon(shipUpLightsX, shipUpLightsY, 3);				int shipUpLightsX1 [] = {spaceShipH + 65, spaceShipH + 80, spaceShipH + 95};		int shipUpLightsY1 [] = {115, 70, 115};		g.fillPolygon(shipUpLightsX1, shipUpLightsY1, 3);				int shipUpLightsX2 [] = {spaceShipH + 95, spaceShipH + 110, spaceShipH + 125};		int shipUpLightsY2 [] = {115, 70, 115};		g.fillPolygon(shipUpLightsX2, shipUpLightsY2, 3);				int shipUpLightsX3 [] = {spaceShipH + 125, spaceShipH + 140, spaceShipH + 155};		int shipUpLightsY3 [] = {115, 70, 115};		g.fillPolygon(shipUpLightsX3, shipUpLightsY3, 3);				int shipUpLightsX4 [] = {spaceShipH + 155, spaceShipH + 170, spaceShipH + 185};		int shipUpLightsY4 [] = {115, 70, 115};		g.fillPolygon(shipUpLightsX4, shipUpLightsY4, 3);				int shipUpLightsX5 [] = {spaceShipH + 185, spaceShipH + 200, spaceShipH + 215};		int shipUpLightsY5 [] = {115, 70, 115};		g.fillPolygon(shipUpLightsX5, shipUpLightsY5, 3);				int shipUpLightsX6 [] = {spaceShipH + 215, spaceShipH + 230, spaceShipH + 245};		int shipUpLightsY6 [] = {115, 70, 115};		g.fillPolygon(shipUpLightsX6, shipUpLightsY6, 3);				int shipUpLightsX7 [] = {spaceShipH + 245, spaceShipH + 260, spaceShipH + 275};		int shipUpLightsY7 [] = {115, 70, 115};		g.fillPolygon(shipUpLightsX7, shipUpLightsY7, 3);						//between triangle lights ship		g.setColor(Color.black);		g.fillRect(spaceShipH -10, 116, 500, 18);				//triangle lights bottom row ship		g.setColor(Color.yellow);		int shipLowLightsX [] = {spaceShipH + 20, spaceShipH + 35, spaceShipH + 50};		int shipLowLightsY [] = {180, 135, 180};		g.fillPolygon(shipLowLightsX, shipLowLightsY, 3);				int shipLowLightsX1 [] = {spaceShipH + 50, spaceShipH + 65, spaceShipH + 80};		int shipLowLightsY1 [] = {180, 135, 180};		g.fillPolygon(shipLowLightsX1, shipLowLightsY1, 3);				int shipLowLightsX2 [] = {spaceShipH + 80, spaceShipH + 95, spaceShipH + 110};		int shipLowLightsY2 [] = {180, 135, 180};		g.fillPolygon(shipLowLightsX2, shipLowLightsY2, 3);			int shipLowLightsX3 [] = {spaceShipH + 110, spaceShipH + 125, spaceShipH + 140};		int shipLowLightsY3 [] = {180, 135, 180};		g.fillPolygon(shipLowLightsX3, shipLowLightsY3, 3);				int shipLowLightsX4 [] = {spaceShipH + 140, spaceShipH + 155, spaceShipH + 170};		int shipLowLightsY4 [] = {180, 135, 180};		g.fillPolygon(shipLowLightsX4, shipLowLightsY4, 3);			int shipLowLightsX5 [] = {spaceShipH + 170, spaceShipH + 185, spaceShipH + 200};		int shipLowLightsY5 [] = {180, 135, 180};		g.fillPolygon(shipLowLightsX5, shipLowLightsY5, 3);			int shipLowLightsX6 [] = {spaceShipH + 200, spaceShipH + 215, spaceShipH + 230};		int shipLowLightsY6 [] = {180, 135, 180};		g.fillPolygon(shipLowLightsX6, shipLowLightsY6, 3);			int shipLowLightsX7 [] = {spaceShipH + 230, spaceShipH + 245, spaceShipH + 260};		int shipLowLightsY7 [] = {180, 135, 180};		g.fillPolygon(shipLowLightsX7, shipLowLightsY7, 3);				//between triangle door		g.setColor(Color.black);		g.fillRect(spaceShipH -20, 181, 500, 18);				//door		g.setColor(curbColor);		g.fillRect(spaceShipH + 19, 200, 150, 200);		g.setColor(Color.black);		g.drawRect (spaceShipH + 19, 200, 150, 200);				//door detail		g.setColor(curbshadowColor);		g.drawLine(spaceShipH + 19, 230, spaceShipH + 169, 230);		g.fillOval(spaceShipH + 29, 210, 10, 10);		g.fillOval(spaceShipH + 59, 210, 10, 10);		g.fillOval(spaceShipH + 89, 210, 10, 10);		g.fillOval(spaceShipH + 119, 210, 10, 10);		g.fillOval(spaceShipH + 149, 210, 10, 10);				g.drawLine(spaceShipH + 19, 260, spaceShipH + 169, 260);		g.fillOval(spaceShipH + 44, 240, 10, 10);		g.fillOval(spaceShipH + 74, 240, 10, 10);		g.fillOval(spaceShipH + 104, 240, 10, 10);		g.fillOval(spaceShipH + 134, 240, 10, 10);		g.drawLine(spaceShipH + 19, 290, spaceShipH + 169, 290);		g.fillOval(spaceShipH + 29, 270, 10, 10);		g.fillOval(spaceShipH + 59, 270, 10, 10);		g.fillOval(spaceShipH + 89, 270, 10, 10);		g.fillOval(spaceShipH + 119, 270, 10, 10);		g.fillOval(spaceShipH + 149, 270, 10, 10);				g.drawLine(spaceShipH + 19, 320, spaceShipH + 169, 320);		g.fillOval(spaceShipH + 44, 300, 10, 10);		g.fillOval(spaceShipH + 74, 300, 10, 10);		g.fillOval(spaceShipH + 104, 300, 10, 10);		g.fillOval(spaceShipH + 134, 300, 10, 10);		g.drawLine(spaceShipH + 19, 350, spaceShipH + 169, 350);		g.fillOval(spaceShipH + 29, 330, 10, 10);		g.fillOval(spaceShipH + 59, 330, 10, 10);		g.fillOval(spaceShipH + 89, 330, 10, 10);		g.fillOval(spaceShipH + 119, 330, 10, 10);		g.fillOval(spaceShipH + 149, 330, 10, 10);				g.drawLine(spaceShipH + 19, 380, spaceShipH + 169, 380);		g.fillOval(spaceShipH + 44, 360, 10, 10);		g.fillOval(spaceShipH + 74, 360, 10, 10);		g.fillOval(spaceShipH + 104, 360, 10, 10);		g.fillOval(spaceShipH + 134, 360, 10, 10);		//ship bottom leg		g.setColor(curbColor);		int shipBottomLegX [] = {spaceShipH + 100, spaceShipH + 100, spaceShipH - 50, spaceShipH - 50};		int shipBottomLegY [] = {500, 525, 575, 550};		g.fillPolygon(shipBottomLegX, shipBottomLegY, 4);		g.fillRect(spaceShipH - 50, 550, 25, 50);		g.fillOval(spaceShipH - 90, 570, 100, 50);		g.setColor(Color.yellow);		g.fillOval(spaceShipH - 60, 570, 40, 50);		g.setColor(yellowLight);		int bottomLegLightX [] = {spaceShipH - 50, spaceShipH - 40, spaceShipH - 30};		int bottomLegLightY [] = {620, 660, 620};		g.fillPolygon(bottomLegLightX, bottomLegLightY, 3);						//ship top leg		g.setColor(curbColor);		int shipTopLegX [] = {spaceShipH + 100, spaceShipH + 100, spaceShipH - 50, spaceShipH - 50};		int shipTopLegY [] = {5, 30, 50, 25};		g.fillPolygon(shipTopLegX, shipTopLegY, 4);		g.fillRect(spaceShipH - 50, 30, 25, 50);		g.fillOval(spaceShipH - 90, 50, 100, 50);		g.setColor(Color.yellow);		g.fillOval(spaceShipH - 60, 50, 40, 50);		g.setColor(yellowLight);		int topLegLightX [] = {spaceShipH - 50, spaceShipH - 40, spaceShipH - 30};		int topLegLightY [] = {100, 140, 100};		g.fillPolygon(topLegLightX, topLegLightY, 3);						//ship bottom half circle		g.setColor(curbshadowColor);		g.fillOval(spaceShipH + 50, 410, 80, 80);		g.fillOval(spaceShipH + 135, 440, 20, 20);		g.fillOval(spaceShipH + 160, 410, 80, 80);		g.fillOval(spaceShipH + 120, 510, 80, 80);		g.fillOval(spaceShipH + 205, 540, 20, 20);		g.fillOval(spaceShipH + 230, 510, 80, 80);					if (frames > 1800 && frames < 2200)			spaceShipH--;					if (frames > 2200)		{			if (frames < 3000)			{				//yellow door movement				g.setColor(yellowLight);				g.fillRect(720, 200, 150, spaceShipDoorLightV);				g.setColor(Color.black);				g.drawRect(720, 200, 150, spaceShipDoorLightV);												//gray draw bridge door part				g.setColor(curbColor);				int spaceShipDoorX [] = {870, 870, spaceShipDoorH + 750, spaceShipDoorH + 750};				int spaceShipDoorY [] = {395, 405, 405, 395};				g.fillPolygon(spaceShipDoorX, spaceShipDoorY, 4);								if (frames < 2300)				{					spaceShipDoorH --;					spaceShipDoorH --;					spaceShipDoorH --;					spaceShipDoorH --;					spaceShipDoorLightV ++;					spaceShipDoorLightV ++;				}								//et parent moving toward bike				if (frames > 2301 && frames < 2575 )				{					//et parent head					g.setColor(etColor);					g.fillOval(etParentH + 755, 250, 55, 40);												g.setColor(etOutlineColor); 												g.drawOval(etParentH + 755, 250, 55, 40);										//et parent eyes					g.setColor(Color.white); 													//g.fillArc(etParentH + 255, etParentV + 325, 60, 50, 270, -200);					//g.fillOval(etParentH + 255, etParentV + 365, 30, 20);					g.fillOval(etParentH + 772, 255, 12, 12);					g.setColor(etEyes);															g.fillOval(etParentH + 772, 257, 9, 9);										//et parent mouth					g.setColor(etOutlineColor);												g.fillOval(etParentH + 765, 275, 10, 5);																	//et parent body					g.setColor(etColor);					g.fillRoundRect(etParentH + 765, 285, 40, 100, 90, 90);									g.fillOval(etParentH + 753, 380, 42, 15);										//et parent arm					g.setColor(etOutlineColor);					g.drawLine(etParentH + 775, 305, etParentH + 775, 345);									g.drawLine(etParentH + 785, 305, etParentH + 785, 345);											//et parent moving toward bike					if (frames > 2301 && frames < 2400)					{						etParentH--;						etParentH--;					}										//et getting out of bike					if (frames > 2450)					{							if (frames < 2500)							etV--;						else 						{							etV++;							etH++;						}					}				}									//et parent turn around to ship				if (frames > 2575 && frames < 3000 )				{					//et parent head					g.setColor(etColor);					g.fillOval(etParentH + 755, 250, 55, 40);												g.setColor(etOutlineColor); 												g.drawOval(etParentH + 755, 250, 55, 40);										//et parent eyes					g.setColor(Color.white); 													//g.fillArc(etParentH + 255, etParentV + 325, 60, 50, 270, -200);					//g.fillOval(etParentH + 255, etParentV + 365, 30, 20);					g.fillOval(etParentH + 800, 255, 12, 12);					g.setColor(etEyes);															g.fillOval(etParentH + 800, 257, 9, 9);										//et parent mouth					g.setColor(etOutlineColor);												g.fillOval(etParentH + 800, 275, 10, 5);																	//et parent body					g.setColor(etColor);					g.fillRoundRect(etParentH + 765, 290, 40, 100, 90, 90);									g.fillOval(etParentH + 767, 380, 42, 15);										//et parent arms					g.setColor(etOutlineColor);					g.drawLine(etParentH + 775, 305, etParentH + 775, 345);									g.drawLine(etParentH + 785, 305, etParentH + 785, 345);															if (frames > 2600)					{						//ET head						g.setColor(etColor);						g.fillOval(etH + 255, etV + 330, 55, 40);							g.setColor(etOutlineColor); 													g.drawOval(etH + 255, etV + 330, 55, 40);												//et hood						g.setColor(Color.white); 														g.fillArc(etH + 255, etV + 325, 60, 50, 270, -200);												//et eyes						g.fillOval(etH + 293, etV + 340, 12, 12);						g.setColor(etEyes);																g.fillOval(etH + 295, etV + 340, 9, 9);												//et mouth						g.setColor(etOutlineColor);													g.fillOval(etH + 300, etV + 355, 10, 5);																			//et foot						g.setColor(etColor);						g.fillOval(etH + 260, etV + 410, 40, 10);						g.setColor(etOutlineColor);						g.drawOval(etH + 260, etV + 410, 40, 10);												//et body						g.setColor(etColor);						g.fillRoundRect(etH + 255, etV + 370, 40, 50, 30, 90);						g.setColor(etOutlineColor);						g.drawRoundRect(etH + 255, etV + 370, 40, 50, 30, 90);											//et arm						g.drawLine(etH + 275, etV + 380, etH + 275, etV + 400 );						g.drawLine(etH + 285, etV + 380, etH + 285, etV + 400 );												//et blanket for body						g.setColor(Color.white);						g.fillOval(etH + 255, etV + 365, 35, 50);					}										etH++;					etH++;					etH++;					etParentH++;										//hide them part of the door					g.setColor(spaceShipColor);					g.fillRect(spaceShipHideThemH + 870 , 200, 300, 200);					g.setColor(Color.black);					g.drawLine(spaceShipHideThemH + 870, 200, spaceShipHideThemH + 870, 400);									}								if (frames > 2900 && frames < 3000)				{					spaceShipDoorH++;					spaceShipDoorH++;					spaceShipDoorH++;					spaceShipDoorLightV--;					spaceShipDoorLightV--;									}			}		}						if (frames > 3000 && frames < 3400)		{			spaceShipH ++;			bikeV++;		}			} // end paintscene3		public void paintScene4 (Graphics g)	{		g.setColor(skyColor);		g.fillRect(0, 0, 950, 650);		// other code				//stars		g.setColor(Color.yellow);		int starX = (int) (Math.random()*950);		int starY = (int) (Math.random()*650);		g.drawLine(starX, starY, starX, starY + 20);		g.drawLine(starX - 10, starY + 10, starX + 10, starY + 10);				//Moon				g.setColor(moonColor); 				moonH = -600;		moonV = 0;		g.fillOval(moonH+800, moonV, 500, 500);					bikeV++;		bikeV++;	} //end paintscene 4		public void paintScene5 (Graphics g)	{				if (frames > 3601 && frames <= 3750)		{			if (frames < 3750)			{				bikeV++;				bikeV++;			}			else				count = 4;		}				g.setColor(skyColor);		g.fillRect(0, 0, 950, 650);				//stars		g.setColor(Color.yellow);		int starX = (int) (Math.random()*950);		int starY = (int) (Math.random()*650);		g.drawLine(starX, starY, starX, starY + 20);		g.drawLine(starX - 10, starY + 10, starX + 10, starY + 10);						//moon		g.setColor(moonColor);		g.fillOval(800, 20, 100, 100);				if (frames > 3775 && frames < 3900)		{			g.setColor(moonColorClear);				g.fillOval(750, -30, 200, 200);		}				// paint the ground and mountains		g.setColor(mtnColor);		int mtn1X [] = {0, 0, 100, 200, 325, 400, 500, 550, 640, 700, 750, 780, 800, 900, 950, 950};		int mtn1Y [] = {380, 200, 225, 175, 250, 280, 240, 210, 265, 230, 225, 225, 250, 175, 220, 380};		g.fillPolygon(mtn1X, mtn1Y, 16);		//Grass		g.setColor(Color.green); 		g.fillRect(0, 300, 950, 350);				//road		g.setColor(Color.GRAY); 		g.fillRect(0, 320, 950, 250);						//main part of road				//curb		g.setColor(curbColor);		g.fillRect(0, 315, 950, 6); 						//top of top curb		g.fillRect(0, 340, 950, 3); 						//bottom of top curb (light color)		g.fillRect(0, 545, 950, 25); 						//bottom curb		g.setColor(curbshadowColor);		g.fillRect(0, 320, 950, 20);		g.fillRect(0, 570, 950, 15);		g.setColor(Color.yellow); 							//road center lines		g.fillRect(0, 380, 950, 5);				// CAR (nasa building)		g.setColor(Color.BLACK); 		int carblX [] = {485, 500, 580, 600, 800, 820, 920, 945};		int carblY [] = {500, 435, 430, 360, 360, 430, 435, 500};		g.fillPolygon(carblX, carblY, 8);					// black part of car				// car mid section (white)		g.setColor(Color.WHITE);		int carwhX [] = {580, 580, 600, 800, 820, 820};		int carwhY [] = {500, 430, 355, 355, 430, 500};		g.fillPolygon(carwhX, carwhY, 6);				//windows		g.setColor(Color.black); 		int carWinX1 [] = {590, 610, 690, 690};		int carWinY1 [] = {435, 370, 370, 435};		g.fillPolygon(carWinX1, carWinY1, 4); 				// back window		int carWinX2 [] = {710, 710, 790, 810};		int carWinY2 [] = {435, 370, 370, 435};		g.fillPolygon(carWinX2, carWinY2, 4);				// front window				//door		g.drawLine(700, 360, 700, 495); 					// doors middle line		g.drawLine(590, 495, 810, 495);						// horizontal top of door		g.drawLine(590, 495, 590, 435);						// back door vertical line		g.drawLine(810, 495, 810, 435);						// front door vertical line		g.drawLine(610, 360, 790, 360);						// door slant		g.fillRoundRect(600, 445, 30, 10, 30, 30); 			// back door handle		g.fillRoundRect(710, 445, 30, 10, 30, 30); 			// front door handle				//front wind shield		Color windShieldColor = new Color (117, 167, 172);		g.setColor(windShieldColor);		int carFrX [] = {816, 796, 802, 821};		int carFrY [] = {432, 360, 360, 432};		g.fillPolygon(carFrX, carFrY, 4);		g.setColor(Color.gray);		g.drawPolygon(carFrX, carFrY, 4);				//back wind shield		g.setColor(windShieldColor);		int carBkX [] = {579, 596, 603, 585};		int carBkY [] = {432, 370, 370, 432};		g.fillPolygon(carBkX, carBkY, 4);		g.setColor(Color.gray);		g.drawPolygon(carBkX, carBkY, 4);				// car back tire		g.setColor(Color.BLACK); 		g.fillOval(530, 480, 60, 60);		g.setColor(Color.gray);		g.drawOval(530, 480, 60, 60);		g.setColor(Color.WHITE);		g.fillOval(540, 490, 40, 40);		g.setColor(Color.BLACK);		g.fillOval(555, 505, 10, 10);		g.drawLine(560, 490, 560, 530);		g.drawLine(540, 510, 580, 510);		g.drawLine(545, 525, 575, 495);		g.drawLine(545, 495, 575, 525);				//car front tire		g.setColor(Color.BLACK); 		g.fillOval(810, 480, 60, 60);		g.setColor(Color.gray);		g.drawOval(810, 480, 60, 60);		g.setColor(Color.WHITE);		g.fillOval(820, 490, 40, 40);		g.setColor(Color.BLACK);		g.fillOval(835, 505, 10, 10);		g.drawLine(840, 490, 840, 530);		g.drawLine(820, 510, 860, 510);		g.drawLine(825, 525, 855, 495);		g.drawLine(825, 495, 855, 525);				// paint the blue NASA log with white letters on the building		g.setColor(Color.blue);		g.fillOval(745, 440, 50, 50);		g.setColor(Color.red);		g.drawLine(745, 470, 790, 450);		g.drawLine(760, 485, 790, 450);		g.setColor(Color.white);		g.drawString("NASA", 755, 470);		// paint the control tower	-- water tower		g.setColor(Color.white);		g.fillRect(110, 210, 10, 95);		g.fillRect(180, 210, 10, 95);		g.fillRect(145, 220, 10, 80);		g.setColor(Color.BLACK);		g.drawRect(110, 210, 10, 95);		g.drawRect(180, 210, 10, 95);		g.drawRect(145, 220, 10, 80);		g.setColor(Color.white);		g.fillOval(100, 150, 100, 75);		g.setColor(Color.black);		g.drawOval(100, 150, 100, 75);		g.setColor(Color.WHITE);		g.drawOval(110, 255, 75, 10);		g.drawLine(150, 140, 150, 150);		// Paint the count-down clock		g.setColor(Color.blue);		g.fillRoundRect(108, 167, 85, 40, 40, 30);		g.setColor(Color.black);		g.fillRoundRect(110, 170, 80, 35, 40, 30);			}//end paintscene5		public void paintScene6 (Graphics g)	{		g.setColor(skyColor);		g.fillRect(0, 0, 950, 650);				//stars		g.setColor(Color.yellow);		int starX = (int) (Math.random()*950);		int starY = (int) (Math.random()*650);		g.drawLine(starX, starY, starX, starY + 20);		g.drawLine(starX - 10, starY + 10, starX + 10, starY + 10);						//et hand palm		g.setColor(etOutlineColor);		int etHandPalmX [] = {450, 640, 640, 490};		int etHandPalmY [] = {350, 200, 240, 350};		g.fillPolygon(etHandPalmX, etHandPalmY, 4);		g.setColor(etColor);		g.drawPolygon(etHandPalmX, etHandPalmY, 4);				//et back finger		g.setColor(etColor);		g.drawOval(675, 410, 40, 60);		g.setColor(etOutlineColor);		int etHandBackFingerX [] = {620, 650, 710, 680};		int etHandBackFingerY [] = {200, 200, 430, 430};		g.fillPolygon(etHandBackFingerX, etHandBackFingerY, 4);		g.setColor(etColor);		g.drawPolygon(etHandBackFingerX, etHandBackFingerY, 4);		g.setColor(etOutlineColor);		g.drawLine(624, 215, 633, 250);		g.fillOval(675, 410, 40, 60);						g.setColor(skyColor);		int backFingerTriangleX [] = {600, 635, 640};		int backFingerTriangleY [] = {250, 225, 250};		g.fillPolygon(backFingerTriangleX, backFingerTriangleY, 3);		g.setColor(etColor);		g.drawPolygon(backFingerTriangleX, backFingerTriangleY, 3);				//et bent finger		g.setColor(etOutlineColor);		int etHandBentFingerX [] = {580, 580, 760, 760};		int etHandBentFingerY [] = {280, 250, 250, 280};		g.fillPolygon(etHandBentFingerX, etHandBentFingerY, 4);		g.setColor(etColor);		g.drawOval(725, 410, 40, 60);		g.drawPolygon(etHandBentFingerX, etHandBentFingerY, 4);		g.setColor(etOutlineColor);		g.drawLine(580, 250, 580, 280);		g.fillRect(730, 250, 30, 180);		g.setColor(etColor);		g.drawLine(730, 250, 760, 250);		g.drawLine(730, 280, 730, 430);		g.drawLine(760, 250, 760, 430);		g.drawLine(730, 430, 760, 430);		g.setColor(etOutlineColor);		g.fillOval(725, 410, 40, 60);			//et hand "l" part		g.setColor(etColor);		int etHandLX [] = {400, 400, 820, 820, 450, 450};		int etHandLY [] = {650, 325, 50, 80, 350, 650};		g.fillPolygon(etHandLX, etHandLY, 6);		g.setColor(etOutlineColor);		g.drawPolygon(etHandLX, etHandLY, 6);				//et thumb		g.setColor(etOutlineColor);		g.drawOval(730, 315, 60, 40);		g.setColor(etColor);		int etHandThumbX [] = {450, 760, 760, 450};		int etHandThumbY [] = {350, 320, 350, 380};		g.fillPolygon(etHandThumbX, etHandThumbY, 4);		g.setColor(etOutlineColor);		g.drawPolygon(etHandThumbX, etHandThumbY, 4);		g.setColor(etColor);		g.drawLine(450, 350, 450, 380);		g.fillOval(730, 315, 60, 40);										if (frames > 4050)		{			g.setColor(moonColorClear);				g.fillOval(750, -30, 200, 200);		}						g.setColor(moonColor);		g.fillOval(800, 20, 100, 100);				if (frames >= 4210)		{			g.setColor(Color.black);			g.fillRect(0, 0, 950, 650);		}						}//end paint scene 6}// end class Rocket/*HERE IS THE LIST OF JAVA DRAWING AND PAINTING COMMANDS and INFORMATION.---------------------------------------------------------------------------g.setColor(Color.red);Sets the current color of the paint brush to draw or paint.  Whichever drawingor painting command comes next will draw or paint with this color.Here is the list of Java Color constants that can be used:Color.redColor.yellowColor.blueColor.orangeColor.pinkColor.cyanColor.magentaColor.blackColor.whiteColor.grayColor.lightGrayColor.darkGrayTo create a custom color, call the Color class constructor and pass it theappropriate RGB values (red, green, blue values) ...Color colorVariableName = new Color (R, G, B);For example, the color brown has the following RGB values:red = 164, green = 84, and blue = 30. So to construct brown use ...Color brown = new Color(164, 84, 30);then you would call setColor as follows:g.setColor(brown);//Note: DON'T TRY TO USE Color.brown in parentheses ( ).  It is not a constant!------------------------------------------------------------------------g.drawLine(x1, y1, x2, y2);Draws a line from (x1, y1) to (x2, y2)To draw a line from the point (10, 25) to the point (40, 55) use ...g.drawLine(10, 25, 40, 55);-------------------------------------------------------------------------g.drawRect(x, y, width, height);	Draws the outline of a rectangle whose upper-left corner is (x, y) and whosedimensions are the specified width and height.  To draw a rectangle withupper-left hand corner at the point (50,50) with a width of 200 and heightof 150 use ...g.drawRect(50, 50, 200, 150);-------------------------------------------------------------------------g.fillRect(x, y, width, height);Paints a rectangle whose upper-left corner is (x, y) and whose dimensionsare the specified width and height.  To paint a rectangle with upper-lefthand corner at the point (50,50) with a width of 200 and height of 150 use ...g.fillRect(50, 50, 200, 150);-------------------------------------------------------------------------g.clearRect(x, y, width, height);Erases a rectangular area whose upper-left corner is (x, y) and whosedimensions are the specified width and height with the current backgroundcolor.  To erase the rectangular area with an upper left hand corner of(10, 25) that has a width of 40 pixels and a height of 30 pixels use ...g.clearRect(10, 25, 40, 30);-------------------------------------------------------------------------g.drawRoundRect(x, y, width, height, arcWidth, arcHeight);	Draws the outline of a rounded rectangle whose upper-left corner is (x, y)and whose dimensions are the specified width and height.  The arcWidthand arcHeight values control how much the corners are rounded.  To makethe corners perfectly rounded (symmetrical) make these last two valuesthe same number.  For example, to draw a rounded-rectangle with anupper-left corner positioned at the point (40, 40) that has a width of 75and a height of 35 and an arcWidth and arcHeight of 5 use ...g.drawRoundRect(40, 40, 75, 35, 5, 5);-------------------------------------------------------------------------g.fillRoundRect(x, y, width, height, arcWidth, arcHeight);		Paints a rounded rectangle whose upper-left corner is (x, y) and whosedimensions are the specified width and height.  The arcWidth and arcHeightvalues control how much the corners are rounded.  To make the cornersperfectly rounded (symmetrical) make these last two values the same number.For example, to paint a rounded-rectangle with an upper-left cornerpositioned at the point (40, 40) that has a width of 75 and a height of 35and an arcWidth and arcHeight of 5 use ...g.fillRoundRect(40, 40, 75, 35, 5, 5);-------------------------------------------------------------------------g.drawOval(x, y, width, height);Draws the outline of an oval that is inscribed within a rectangular area whoseupper-left corner is (x, y) and whose dimensions are the specified widthand height.  To draw a circle, make the width and height equal. For example,to draw an oval with upper-left corner at the point (10, 25) and a width of 50and a height of 25 use ...g.drawOval(10, 25, 50, 25);-------------------------------------------------------------------------g.fillOval(x, y, width, height);Paints an oval that is inscribed within a rectangular area whose upper-leftcorner is (x, y) and whose dimensions are the specified width and height.To draw a circle, make the width and height equal. For example, to paint anoval with upper-left corner at the point (10, 25) and a width of 50 and aheight of 25 use ...g.fillOval(10, 25, 50, 25);-------------------------------------------------------------------------g.drawArc(x, y, width, height, startAngle, arcAngle);		Draws the outline of an arc that is inscribed within a rectangle whoseupper-left corner is (x, y) and whose dimensions are the specified widthand height.  The arc is drawn from startAngle to startAngle + arcAngle.The angles are expressed in degrees.  A startAngle of 0 indicates the3 o'clock position.  A positive arc indicates a counterclockwise rotation,and a negative arc indicates a clockwise rotation from 3 o'clock.  Forexample, to draw an arc whose upper-left corner is (10, 25) and whoserectangular area has a width of 50 and a height of 50 with a starting angleof 0 sweeping for 90 degrees use ...g.drawArc(10, 25, 50, 50, 0, 90);-------------------------------------------------------------------------g.fillArc(x, y, width, height, startAngle, arcAngle);Paints an arc that is inscribed within a rectangle whose upper-left corneris (x, y) and whose dimensions are the specified width and height.  The arcis drawn from startAngle to startAngle + arcAngle.  The angles are expressedin degrees.  A startAngle of 0 indicates the 3 o'clock position.  A positivearc indicates a counterclockwise rotation, and a negative arc indicates aclockwise rotation from 3 o'clock.  For example, to paint an arc whoseupper-left corner is (10, 25) and whose rectangular area has a width of 50and a height of 50 with a starting angle of 0 sweeping for 90 degrees use ...g.fillArc(10, 25, 50, 50, 0, 90);-------------------------------------------------------------------------g.drawPolygon(x, y, n);Draws an n-sided polygon where x and y have already been defined as listsin lines of code prior to the command.The following line defines a list named x that will hold all of the x values(abscissas) of the points of the polygon.int x [ ] = {x1, x2, x3, .... }; The following line defines a list named y that will hold all of the y values(ordinates) of the points of the polygon.int y [ ] = {y1, y2, y3, .... };So, to draw the pentagon defined by the 5 points:(10, 25) , (40, 25) , (60, 50) , (30, 60) , (40, 40)  use ...int x [ ] = {10, 40, 60, 30, 40};int y [ ] = {25, 25, 50, 60, 40};g.drawPolygon(x, y, 5);  // The number is 5 because it is a pentagon.-------------------------------------------------------------------------g.fillPolygon(x, y, n);Paints an n-sided polygon where x and y have already been defined as listsin lines of code prior to the command.The following line defines a list named x that will hold all of the x values(abscissas) of the points of the polygon.int x [ ] = {x1, x2, x3, .... }; The following line defines a list named y that will hold all of the y values(ordinates) of the points of the polygon.int y [ ] = {y1, y2, y3, .... };For example, to paint a pentagon by connecting the points:(10, 25) , (40, 25) , (60, 50) , (30, 60) , (40, 40)  useint x [ ] = {10, 40, 60, 30, 40};int y [ ] = {25, 25, 50, 60, 40};g.fillPolygon(x, y, 5);  // The number is 5 because it is a pentagon.-------------------------------------------------------------------------g.drawString(str, x, y);Draws the String value stored in the String variable str at the point (x, y)starting at the position of the base line of the first character in str.To draw the words "Java Rules" beginning at the point (10, 50), then use ...g.drawString("Java Rules", 10, 50);-------------------------------------------------------------------------getWidth()Call this method without any object to get the width in pixels of the panel.When calling this method do not put g and a dot before it.getHeight()Call this method without any object to get the height in pixels of the panel.When calling this method do not put g and a dot before it.For example, if you wanted to find the location one-fourth of the way acrossthe window, you could use  getWidth() / 4  as a parameter.  You could also usegetHeight() / 4 to find the location 1/4 of the way down.To draw the string "Java Rules" at this location in the applet window use ...g.drawString("Java Rules", getWidth() / 4, getHeight() / 4);-------------------------------------------------------------------------THE END. */