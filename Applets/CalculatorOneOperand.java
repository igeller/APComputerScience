// CalculatorOneOperand Applet Program// Name:  import java.awt.BorderLayout;import java.awt.Container;import java.awt.Font;import java.awt.GridBagLayout;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JApplet;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;public class CalculatorOneOperand extends JApplet implements ActionListener{	private static final long serialVersionUID = 1L;	/*	1. Run the program on line and try running the following data:		Enter 100 for X and click all of the buttons.  Observe the output.		Enter 0 for X and click all of the buttons.  Observe the output and error messages.		Enter -5 for X and click all of the buttons.  Observe the output and error messages.			Note how the GUI is set up in the BorderLayout of the applet.  You will want		to duplicate this layout in your program.  Begin by writing the code to		declare the different GUI components ... labels, fields, and button.	   Follow the example in the Calculator.java file that you recently completed.	   Declare and instantiate all of the components globally below these instructions.	   // Use the following variable names for your components:	    		opLbl 		opFld 			output				oneOverXBtn 		squareBtn	squareRootBtn 	logXBtn		clearBtn				Make your JTextArea with 20 rows and 75 columns				The heading variable for the TextArea is declared and instantiated for you.	*/	String heading = String.format("%56s%n", "Welcome to the One Operand Calculator\n");	JLabel opLbl = new JLabel ("Enter the value of X: ", JLabel.CENTER);	JTextField opFld = new JTextField ("", 20);	JTextArea output = new JTextArea (20, 75);	JButton oneOverXBtn = new JButton ("1/x");	JButton squareBtn = new JButton ("x-squared");	JButton squareRootBtn = new JButton ("\u221Ax");	JButton logXBtn = new JButton ("log x");	JButton clearBtn = new JButton ("Clear");												// ********************************************************************************		// INSTRUCTIONS FOR THE INIT METHOD	/*	2. Next, write the code for the init() method and use a similar design approach		for the layout as used in Calculator.java.  Construct the panels listed below		and place the following components in the panels.		opLbl and opFld go into a default JPanel with no GridLayout named dataPanel and		the dataPanel goes in the NORTH region.				textPanel contains output wrapped in a JScrollPane ... use the line of code		like Calculator.java textPanel.add(new JScrollPane (output));		the textPanel goes in the CENTER region.				the buttons oneOverXBtn, squareBtn, squareRootBtn, logXBtn, and clearBtn go in		the buttonPanel and the buttonPanel goes in the CENTER region.  (Note:  buttonPanel		is a 1 x 5 GridLayout  ... use a horizontal gap of 5, but a vertical gap of just 1)	 */	public void init() 	{			resize(700, 470);		Font myFont = new Font ("Courier", Font.PLAIN, 14);					// Do not delete these lines.  Errors will clear up once the GUI components		// are declared.		opLbl.setFont(myFont);		opFld.setFont(myFont);		oneOverXBtn.setFont(myFont);		squareBtn.setFont(myFont);		squareRootBtn.setFont(myFont);		logXBtn.setFont(myFont);		clearBtn.setFont(myFont);		output.setFont(myFont);		//data panel (oplbl and opFld) -- will be in NORTH region)		JPanel  dataPanel = new JPanel();		dataPanel.add(opLbl);		dataPanel.add(opFld);				//text panel --> will be CENTER REGION		JPanel textPanel = new JPanel();		JScrollPane myJScrollPane = new JScrollPane(output);		// Allow the mouse wheel to scroll inside the text area		myJScrollPane.setWheelScrollingEnabled(true);		textPanel.add(myJScrollPane);				//JPanel buttons -- SOUTH REGION		JPanel buttonPanel = new JPanel(new GridLayout(1, 5, 6, 1));		buttonPanel.add(oneOverXBtn);		buttonPanel.add(squareBtn);		buttonPanel.add(squareRootBtn);		buttonPanel.add(logXBtn);		buttonPanel.add(clearBtn);							/*		 3. Once the panels have the components placed in them in the regions		 of the BorderLayout stated above.		 */		Container container = getContentPane();		container.add(dataPanel, BorderLayout.NORTH);		container.add(textPanel, BorderLayout.CENTER);		container.add(buttonPanel, BorderLayout.SOUTH);						/*		 4. Set the text of the JTextArea output to the value contained in the variable heading.		 	 		 	 Make the text area is un-editable using the line: output.setEditable(false);   			 			 Then set the focus to be opFld by using the line:  opFld1.requestFocus();			 Next, add listeners to all the buttons just like it was done in Calculator.java.			 You are now done with the init() method.  Run the program and view the layout. 		 */		output.setText(heading);		output.setEditable(false);		opFld.requestFocus();				//Listeners		oneOverXBtn.addActionListener(this);;		squareBtn.addActionListener(this);		squareRootBtn.addActionListener(this);		logXBtn.addActionListener(this);		clearBtn.addActionListener(this);			} // END OF THE INIT METHOD	// INSTRUCTIONS FOR THE ACTIONPERFORMED METHOD	/*	   Process the values entered into the operand field in the try clause of a try-catch statement.		If the input is not valid, then the program should show a "Bad Number Format" error 		message in a showMessageDialog window.		Next, complete the extended-if statement to process the appropriate button click.		There are no private inner classes in this program, because we have a lot of buttons.		We can simplify the button processing task by checking for the source of the button.		In each branch of the extended-if, output one of the following messages along with the		result of the arithmetic operation:			"The value of  1/X  is "			"The square of X is "			"The square root of X is "			"The value of  log (X)  is "		Output the following showMessageDialog window error messages at the appropriate time:			"You cannot take the square root of a negative number"			"You cannot take the log base 10 of 0 or a negative number"		If the clear button is clicked, the following should take place in the GUI:				Erase everything in op1Fld.				Erase everything in output.				Reset the focus to op1Fld .	 */	public void actionPerformed(ActionEvent e)	{			String input, s;		double x = 1;		if (e.getSource() == clearBtn)		{			output.setText(heading);			opFld.setText("");			opFld.requestFocus();			return;		}				try		{			input = opFld.getText();			x = Double.parseDouble(input);		}		catch (Exception ex)		{			JOptionPane.showMessageDialog(CalculatorOneOperand.this, "Bad Number Format", 					"Calculator One Operand", JOptionPane.ERROR_MESSAGE);						opFld.setText("");			opFld.requestFocus();			return;		}				if (e.getSource() == oneOverXBtn)		{			s = String.format("%-40s%,30.10f%n","The Value of 1/X is ", 1/x);			output.append(s);			opFld.requestFocus();			}		else if (e.getSource() == squareBtn)		{			s = String.format("%-40s%,30.10f%n","The square of X is ", Math.pow(x,2));			output.append(s);			opFld.requestFocus();			}		else if (e.getSource() == squareRootBtn)		{						if (x<0)			{				JOptionPane.showMessageDialog(CalculatorOneOperand.this, "You cannot take the square root of a neative number", 							"Calculator One Operand", JOptionPane.ERROR_MESSAGE);				opFld.setText("");				opFld.requestFocus();					return;			}			else			{				s = String.format("%-40s%,30.10f%n","The square root of X is ", Math.sqrt(x));				output.append(s);				opFld.requestFocus();				}		}		else if (e.getSource() == logXBtn)		{			if (x <= 0)			{				JOptionPane.showMessageDialog(CalculatorOneOperand.this, "You cannot take the lof base 10 of 0 or a negative number", 						"Calculator One Operand", JOptionPane.ERROR_MESSAGE);								opFld.setText("");				opFld.requestFocus();				return;			}			else			{				s = String.format("%-40s%,30.10f%n","The value of log(X) is ", Math.log10(x));				output.append(s);				opFld.requestFocus();				}		}						// Use Math.log10(x) with calculating the logarithm of x		// Because we are calculating the log base 10 of x.				// Don't use Math.log(x), because it calculates the log base e of x,		// where e = 2.7818281828.....									} // end actionPerformed} // end Calculator